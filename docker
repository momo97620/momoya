#!/bin/bash

# Docker管理脚本
# 版本：1.3
# 作者：emo的小默默
# 描述：提供Docker安装、管理和卸载的一站式脚本

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # 无颜色

# 检查是否为root用户
check_root() {
    if [[ $EUID -ne 0 ]]; then
       echo -e "${RED}错误：此脚本必须以root权限运行！${NC}"
       exit 1
    fi
}

# 系统检测
check_system() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$ID
        VERSION=$VERSION_ID
    else
        echo -e "${RED}无法检测操作系统类型！${NC}"
        exit 1
    fi
}

# 系统更新函数
update_system() {
    # 检查是否已经更新过系统
    if [ ! -f /var/lib/docker_script_updated ]; then
        echo -e "${BLUE}正在更新系统包列表和已安装的包...${NC}"
        case $OS in
            ubuntu|debian)
                apt-get update
                apt-get upgrade -y
                ;;
            centos|rhel|fedora)
                yum update -y
                ;;
        esac

        # 标记系统已经更新
        touch /var/lib/docker_script_updated
        echo -e "${GREEN}系统更新完成！${NC}"
    else
        echo -e "${YELLOW}系统已经是最新状态，无需更新！${NC}"
    fi
}

# 更换Docker源函数
change_docker_source() {
    echo -e "${BLUE}正在更换Docker源...${NC}"
    bash <(curl -sSL https://cdn.jsdelivr.net/gh/SuperManito/LinuxMirrors@main/DockerInstallation.sh)
    echo -e "${GREEN}Docker源更新完成！${NC}"
    read -n 1 -s -r -p "按任意键返回主菜单..."
}

# 检查依赖
check_dependencies() {
    echo -e "${BLUE}正在检查系统依赖...${NC}"
    case $OS in
        ubuntu|debian)
            if ! dpkg -l | grep -q "apt-transport-https\|ca-certificates\|curl\|software-properties-common"; then
                echo -e "${YELLOW}正在安装必要的依赖...${NC}"
                apt-get update
                apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            fi
            ;;
        centos|rhel|fedora)
            if ! rpm -q yum-utils device-mapper-persistent-data lvm2; then
                echo -e "${YELLOW}正在安装必要的依赖...${NC}"
                yum install -y yum-utils device-mapper-persistent-data lvm2
            fi
            ;;
    esac
    echo -e "${GREEN}依赖检查完成！${NC}"
}

# Docker安装函数
install_docker() {
    echo -e "${BLUE}正在安装Docker...${NC}"
    
    # 检查依赖
    check_dependencies

    # 根据不同系统选择安装方式
    case $OS in
        ubuntu|debian)
            # 安装 Docker
            curl -fsSL https://get.docker.com | bash -s docker
            # 安装 Docker Compose
            curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin
            /usr/local/bin/docker-compose
            ;;
        centos|rhel|fedora)
            # 安装 Docker
            yum install -y docker
            # 启动 Docker
            systemctl start docker
            systemctl enable docker
            ;;
    esac
    
    echo -e "${GREEN}Docker 安装完成！${NC}"
    read -n 1 -s -r -p "按任意键返回主菜单..."
}

# 启动 Docker 服务
start_docker() {
    systemctl start docker
    systemctl enable docker
    echo -e "${GREEN}Docker 服务已启动！${NC}"
    read -n 1 -s -r -p "按任意键返回主菜单..."
}

# 停止 Docker 服务
stop_docker() {
    systemctl stop docker
    echo -e "${GREEN}Docker 服务已停止！${NC}"
    read -n 1 -s -r -p "按任意键返回主菜单..."
}

# 容器管理
container_management() {
    while true; do
        clear
        echo -e "${BLUE}\n===== 容器管理 =====${NC}"
        echo "1. 列出所有容器      2. 启动容器"
        echo "3. 停止容器          4. 重启容器"
        echo "5. 删除容器          6. 查看容器日志"
        echo "7. 停止所有容器      8. 启动所有容器"
        echo "0. 返回主菜单"
        
        read -p "请选择操作: " container_choice
        
        case $container_choice in
            1) docker ps -a ;;
            2) 
                while true; do
                    read -p "请输入容器名称或ID (按0返回): " container
                    if [ "$container" == "0" ]; then break; fi
                    docker start "$container" && echo -e "${GREEN}容器 $container 已启动！${NC}" || echo -e "${RED}启动失败，请检查容器名称或ID！${NC}"
                done
                ;;
            3) 
                while true; do
                    read -p "请输入容器名称或ID (按0返回): " container
                    if [ "$container" == "0" ]; then break; fi
                    docker stop "$container" && echo -e "${GREEN}容器 $container 已停止！${NC}" || echo -e "${RED}停止失败，请检查容器名称或ID！${NC}"
                done
                ;;
            4) 
                read -p "请输入容器名称或ID: " container
                docker restart "$container" && echo -e "${GREEN}容器 $container 已重启！${NC}" || echo -e "${RED}重启失败，请检查容器名称或ID！${NC}"
                ;;
            5) 
                # 列出所有容器
                containers=$(docker ps -a --format '{{.Names}}')
                if [ -z "$containers" ]; then
                    echo -e "${RED}没有找到任何容器！${NC}"
                else
                    echo -e "${BLUE}请选择要删除的容器 (按0返回):${NC}"
                    select container in $containers; do
                        if [ "$container" == "0" ]; then break; fi
                        if [ -n "$container" ]; then
                            docker rm -f "$container" && echo -e "${GREEN}容器 $container 已被删除！${NC}" || echo -e "${RED}删除失败，请检查容器名称或ID！${NC}"
                            break
                        else
                            echo -e "${RED}无效的选择，请重试！${NC}"
                        fi
                    done
                fi
                ;;
            6) 
                read -p "请输入容器名称或ID: " container
                docker logs "$container" || echo -e "${RED}获取日志失败，请检查容器名称或ID！${NC}"
                ;;
            7) 
                docker stop $(docker ps -q)
                echo -e "${GREEN}所有容器已停止！${NC}"
                ;;
            8) 
                docker start $(docker ps -aq)
                echo -e "${GREEN}所有容器已启动！${NC}"
                ;;
            0) 
                break 
                ;;
            *) 
                echo -e "${RED}无效的选择，请重试！${NC}" 
                ;;
        esac
        
        # 仅在选择非0选项时提示继续
        if [ "$container_choice" -ne 0 ]; then
            read -n 1 -s -r -p "按任意键继续..."
        fi
    done
}


#镜像管理
image_management() {
    while true; do
        clear
        echo -e "${BLUE}\n===== 镜像管理 =====${NC}"
        echo "1. 列出所有镜像      2. 删除镜像"
        echo "3. 启动镜像          4. 停止镜像"
        echo "5. 启动所有镜像      6. 停止所有镜像"
        echo "7. 重启镜像          0. 返回主菜单"
        
        read -p "请选择操作: " image_choice
        
        case $image_choice in
            1) 
                echo -e "${BLUE}当前镜像列表:${NC}"
                docker images
                read -n 1 -s -r -p "操作完成，按任意键返回..."
                ;;
            2) 
                images=($(docker images --format '{{.Repository}}:{{.Tag}}'))
                if [ ${#images[@]} -eq 0 ]; then
                    echo -e "${RED}没有找到任何镜像！${NC}"
                else
                    echo -e "${BLUE}请选择要删除的镜像（按0返回）:${NC}"
                    select image in "${images[@]}" "返回"; do
                        if [ "$image" == "返回" ]; then
                            break
                        elif [[ " ${images[@]} " =~ " ${image} " ]]; then
                            docker rmi "$image"
                            echo -e "${GREEN}镜像 $image 已被删除！${NC}"
                            break
                        else
                            echo -e "${RED}无效的选择，请重试！${NC}"
                        fi
                    done
                fi
                read -n 1 -s -r -p "操作完成，按任意键返回..."
                ;;
            3) 
                read -p "请输入要启动的镜像（格式：repository:tag）: " image_to_run
                docker run -d "$image_to_run"
                echo -e "${GREEN}镜像已启动！${NC}"
                read -n 1 -s -r -p "操作完成，按任意键返回..."
                ;;
            4) 
                running_images=$(docker ps --format '{{.ID}}: {{.Image}}')
                if [ -z "$running_images" ]; then
                    echo -e "${RED}没有运行中的镜像！${NC}"
                else
                    echo -e "${BLUE}请选择要停止的镜像（按0返回）:${NC}"
                    select image in $running_images; do
                        if [ "$image" == "0" ]; then
                            break
                        elif [ -n "$image" ]; then
                            image_id=$(echo "$image" | cut -d':' -f1)
                            docker stop "$image_id"
                            echo -e "${GREEN}镜像 $image_id 已被停止！${NC}"
                            break
                        else
                            echo -e "${RED}无效的选择，请重试！${NC}"
                        fi
                    done
                fi
                read -n 1 -s -r -p "操作完成，按任意键返回..."
                ;;
            5) 
                echo -e "${BLUE}正在启动所有镜像...${NC}"
                for image in $(docker images --format '{{.Repository}}:{{.Tag}}'); do
                    docker run -d "$image"
                done
                echo -e "${GREEN}所有镜像已启动！${NC}"
                read -n 1 -s -r -p "操作完成，按任意键返回..."
                ;;
            6) 
                echo -e "${BLUE}正在停止所有镜像...${NC}"
                docker stop $(docker ps -q)
                echo -e "${GREEN}所有镜像已停止！${NC}"
                read -n 1 -s -r -p "操作完成，按任意键返回..."
                ;;
            7) 
                images=($(docker images --format '{{.Repository}}:{{.Tag}}'))
                if [ ${#images[@]} -eq 0 ]; then
                    echo -e "${RED}没有找到任何镜像！${NC}"
                else
                    echo -e "${BLUE}请选择要重启的镜像:${NC}"
                    select image in "${images[@]}" "返回"; do
                        if [ "$image" == "返回" ]; then
                            break
                        elif [[ " ${images[@]} " =~ " ${image} " ]]; then
                            image_id=$(docker ps -q --filter ancestor="$image")
                            if [ -n "$image_id" ]; then
                                docker restart "$image_id"
                                echo -e "${GREEN}镜像 $image 的容器已被重启！${NC}"
                            else
                                echo -e "${RED}没有运行中的镜像！${NC}"
                            fi
                            break
                        else
                            echo -e "${RED}无效的选择，请重试！${NC}"
                        fi
                    done
                fi
                read -n 1 -s -r -p "操作完成，按任意键返回..."
                ;;
            0) break ;;
            *) echo -e "${RED}无效的选择，请重试！${NC}" ;;
        esac
    done
}


# 主菜单
main_menu() {
    while true; do
        clear
        echo -e "${BLUE}\n===== Docker 管理脚本 =====${NC}"
        echo "1. 安装 Docker"
        echo "2. 启动 Docker"
        echo "3. 停止 Docker"
        echo "4. 容器管理"
        echo "5. 镜像管理"
        echo "6. 更换 Docker 源"
        echo "0. 退出"
        
        read -p "请选择操作: " choice
        
        case $choice in
            1) install_docker ;;
            2) start_docker ;;
            3) stop_docker ;;
            4) container_management ;;
            5) image_management ;;
            6) change_docker_source ;;
            0) exit 0 ;;
            *) echo -e "${RED}无效的选择，请重试！${NC}" ;;
        esac
        read -n 1 -s -r -p "按任意键继续..."
    done
}

# 主程序
check_root
check_system
update_system
main_menu
