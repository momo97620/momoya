#!/bin/bash

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
BOLD_GREEN='\033[1;32m'  # 粗体绿色
NC='\033[0m' # 无颜色

# 检查是否为 root 用户
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo -e "${RED}请以 root 用户运行此脚本！${NC}"
        exit 1
    fi
}

# 检查系统版本
check_system() {
    if [[ ! -f /etc/os-release ]]; then
        echo -e "${RED}不支持的操作系统！${NC}"
        exit 1
    fi
}

# 安装 Docker 和 Docker Compose
install_docker() {
    if command -v docker >/dev/null 2>&1; then
        echo -e "${GREEN}Docker 已安装，跳过安装步骤。${NC}"
    else
        echo -e "${BLUE}正在安装 Docker 和 Docker Compose...${NC}"
        # 运行用户提供的完整安装命令
        sudo curl -fsSL https://get.docker.com | bash && \
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && \
        sudo chmod +x /usr/local/bin/docker-compose && \
        sudo systemctl start docker && \
        sudo systemctl enable docker
        
        echo -e "${GREEN}Docker 和 Docker Compose 安装完成！${NC}"
    fi
}

# 启动 Docker
start_docker() {
    echo -e "${BLUE}正在启动 Docker...${NC}"
    sudo systemctl start docker
    echo -e "${GREEN}Docker 已启动！${NC}"
}

# 停止 Docker
stop_docker() {
    echo -e "${BLUE}正在停止 Docker...${NC}"
    sudo systemctl stop docker
    echo -e "${GREEN}Docker 已停止！${NC}"
}

# 容器管理
container_management() {
    while true; do
    clear
    echo -e "${BLUE}\n===== 容器管理 =====${NC}"
    
    # 第一排选项
    echo -e "${RED}1.${NC} ${BOLD_GREEN}列出所有容器${NC}      ${RED}2.${NC} ${BOLD_GREEN}启动容器${NC}"
    echo -e "---------------------------"
    
    echo -e "${RED}3.${NC} ${BOLD_GREEN}停止容器${NC}          ${RED}4.${NC} ${BOLD_GREEN}重启容器${NC}"
    echo -e "---------------------------"
    
    echo -e "${RED}5.${NC} ${BOLD_GREEN}删除容器${NC}          ${RED}6.${NC} ${BOLD_GREEN}查看容器日志${NC}"
    echo -e "---------------------------"
    
    echo -e "${RED}7.${NC} ${BOLD_GREEN}停止所有容器${NC}     ${RED}8.${NC} ${BOLD_GREEN}启动所有容器${NC}"
    echo -e "---------------------------"
    
    echo -e "${RED}0.${NC} ${BOLD_GREEN}返回主菜单${NC}"
    echo -e "---------------------------"  # 添加分隔线
    
    read -p "请选择操作: " container_choice
    
        case $container_choice in
            1) 
                echo -e "${BLUE}当前容器列表:${NC}"
                docker ps -a
                read -n 1 -s -r -p "按任意键返回..."
                ;;
            2) 
                while true; do
                    read -p "请输入容器名称或ID（按回车键返回）： " container
                    if [ -z "$container" ]; then
                        echo -e "${YELLOW}已取消操作，返回上级菜单。${NC}"
                        break
                    fi
                    docker start "$container" && echo -e "${GREEN}容器 $container 已启动！${NC}" || echo -e "${RED}启动失败，请检查容器名称或ID！${NC}"
                done
                read -n 1 -s -r -p "按任意键返回..."
                ;;
            3) 
                while true; do
                    containers=$(docker ps --format '{{.Names}}')
                    if [ -z "$containers" ]; then
                        echo -e "${RED}没有运行中的容器！${NC}"
                        break
                    fi
                    echo -e "${BLUE}运行中的容器（按回车键返回）:${NC}"
                    docker ps --format '容器名: {{.Names}}, 容器ID: {{.ID}}'
                    read -p "请输入容器名称或ID（按3返回）： " container
                    if [ -z "$container" ]; then
                        echo -e "${YELLOW}已取消操作，返回上级菜单。${NC}"
                        break
                    fi
                    docker stop "$container" && echo -e "${GREEN}容器 $container 已停止！${NC}" || echo -e "${RED}停止失败，请检查容器名称或ID！${NC}"
                done
                read -n 1 -s -r -p "按任意键返回..."
                ;;
            4) 
                read -p "请输入容器名称或ID（按回车键返回）： " container
                docker restart "$container" && echo -e "${GREEN}容器 $container 已重启！${NC}" || echo -e "${RED}重启失败，请检查容器名称或ID！${NC}"
                read -n 1 -s -r -p "按任意键返回..."
                ;;
            5) 
                containers=$(docker ps -a --format '{{.Names}}')
                if [ -z "$containers" ]; then
                    echo -e "${RED}没有找到任何容器！${NC}"
                else
                    PS3="请输入对应的数字选择："
                    echo -e "${BLUE}请选择要删除的容器（按回车键返回）:${NC}"
                    select container in $containers "返回"; do
                        if [ "$REPLY" == "0" ] || [ "$container" == "返回" ] || [ -z "$container" ]; then
                            echo -e "${YELLOW}已取消操作，返回上级菜单。${NC}"
                            break
                        elif [ -n "$container" ]; then
                            docker rm -f "$container" && echo -e "${GREEN}容器 $container 已被删除！${NC}" || echo -e "${RED}删除失败，请检查容器名称或ID！${NC}"
                            break
                        else
                            echo -e "${RED}无效的选择，请重试！${NC}"
                        fi
                    done
                fi
                read -n 1 -s -r -p "按任意键返回..."
                ;;
            6) 
                read -p "请输入容器名称或ID（按回车键返回）： " container
                docker logs "$container" || echo -e "${RED}获取日志失败，请检查容器名称或ID！${NC}"
                read -n 1 -s -r -p "按任意键返回..."
                ;;
            7) 
                echo -e "${BLUE}正在停止所有容器...${NC}"
                docker stop $(docker ps -q) && echo -e "${GREEN}所有容器已停止！${NC}" || echo -e "${RED}停止失败！${NC}"
                read -n 1 -s -r -p "按任意键返回..."
                ;;
            8) 
                echo -e "${BLUE}正在启动所有容器...${NC}"
                docker start $(docker ps -aq) && echo -e "${GREEN}所有容器已启动！${NC}" || echo -e "${RED}启动失败！${NC}"
                read -n 1 -s -r -p "按任意键返回..."
                ;;
            0) 
                echo -e "${YELLOW}返回主菜单。${NC}"
                break
                ;;
            *) 
                echo -e "${RED}无效的选择，请重试！${NC}"
                read -n 1 -s -r -p "按任意键返回..."
                ;;
        esac
    done
}

# 镜像管理
image_management() {
    while true; do
    clear
    echo -e "${BLUE}\n===== 镜像管理 =====${NC}"
    
    # 第一排选项
    echo -e "${RED}1.${NC} ${BOLD_GREEN}列出所有镜像${NC}      ${RED}2.${NC} ${BOLD_GREEN}删除镜像${NC}"
    echo -e "---------------------------"
    
    echo -e "${RED}3.${NC} ${BOLD_GREEN}启动镜像${NC}          ${RED}4.${NC} ${BOLD_GREEN}停止镜像${NC}"
    echo -e "---------------------------"
    
    echo -e "${RED}5.${NC} ${BOLD_GREEN}启动所有镜像${NC}      ${RED}6.${NC} ${BOLD_GREEN}停止所有镜像${NC}"
    echo -e "---------------------------"
    
    echo -e "${RED}7.${NC} ${BOLD_GREEN}重启镜像${NC}          ${RED}0.${NC} ${BOLD_GREEN}返回主菜单${NC}"
    echo -e "---------------------------"  # 添加分隔线
    
    read -p "请选择操作: " image_choice  

        case $image_choice in
            1) 
                echo -e "${BLUE}当前镜像列表:${NC}"
                docker images
                read -n 1 -s -r -p "按任意键返回..."
                ;;
            2) 
                images=($(docker images --format '{{.Repository}}:{{.Tag}}'))
                if [ ${#images[@]} -eq 0 ]; then
                    echo -e "${RED}没有找到任何镜像！${NC}"
                else
                    PS3="请输入对应的数字选择："
                    echo -e "${BLUE}请选择要删除的镜像（按回车键返回）:${NC}"
                    select image in "${images[@]}" "返回"; do
                        if [ "$REPLY" == "0" ] || [ "$image" == "返回" ]; then
                            echo -e "${YELLOW}已取消操作，返回上级菜单。${NC}"
                            break
                        elif [[ " ${images[@]} " =~ " ${image} " ]]; then
                            docker rmi "$image" && echo -e "${GREEN}镜像 $image 已被删除！${NC}" || echo -e "${RED}删除失败，请检查镜像名称！${NC}"
                            break
                        else
                            echo -e "${RED}无效的选择，请重试！${NC}"
                        fi
                    done
                fi
                read -n 1 -s -r -p "按任意键返回..."
                ;;
            3) 
                read -p "请输入要启动的镜像（按回车键返回）: " image_to_run
                docker run -d "$image_to_run" && echo -e "${GREEN}镜像 $image_to_run 已启动！${NC}" || echo -e "${RED}启动失败，请检查镜像名称！${NC}"
                read -n 1 -s -r -p "按任意键返回..."
                ;;
            4) 
                running_images=$(docker ps --format '{{.ID}}: {{.Image}}')
                if [ -z "$running_images" ]; then
                    echo -e "${RED}没有运行中的镜像！${NC}"
                else
                    PS3="请输入对应的数字选择（按回车键返回）："
                    echo -e "${BLUE}请选择要停止的镜像:${NC}"
                    select image in $running_images "返回"; do
                        if [ "$REPLY" == "0" ] || [ "$image" == "返回" ]; then
                            echo -e "${YELLOW}已取消操作，返回上级菜单。${NC}"
                            break
                        elif [ -n "$image" ]; then
                            image_id=$(echo "$image" | cut -d':' -f1)
                            docker stop "$image_id" && echo -e "${GREEN}镜像 $image_id 已被停止！${NC}" || echo -e "${RED}停止失败！${NC}"
                            break
                        else
                            echo -e "${RED}无效的选择，请重试！${NC}"
                        fi
                    done
                fi
                read -n 1 -s -r -p "按任意键返回..."
                ;;
            5) 
                echo -e "${BLUE}正在启动所有镜像...${NC}"
                for image in $(docker images --format '{{.Repository}}:{{.Tag}}'); do
                    docker run -d "$image"
                done
                echo -e "${GREEN}所有镜像已启动！${NC}"
                read -n 1 -s -r -p "按任意键返回..."
                ;;
            6) 
                echo -e "${BLUE}正在停止所有镜像...${NC}"
                docker stop $(docker ps -q)
                echo -e "${GREEN}所有镜像已停止！${NC}"
                read -n 1 -s -r -p "按任意键返回..."
                ;;
            7) 
                images=($(docker images --format '{{.Repository}}:{{.Tag}}'))
                if [ ${#images[@]} -eq 0 ]; then
                    echo -e "${RED}没有找到任何镜像！${NC}"
                else
                    PS3="请输入对应的数字选择（按回车键返回）："
                    echo -e "${BLUE}请选择要重启的镜像:${NC}"
                    select image in "${images[@]}" "返回"; do
                        if [ "$image" == "返回" ]; then
                            break
                        elif [[ " ${images[@]} " =~ " ${image} " ]]; then
                            image_id=$(docker ps -q --filter ancestor="$image")
                            if [ -n "$image_id" ]; then
                                docker restart "$image_id" && echo -e "${GREEN}镜像 $image 的容器已被重启！${NC}" || echo -e "${RED}重启失败！${NC}"
                            else
                                echo -e "${RED}没有运行中的镜像！${NC}"
                            fi
                            break
                        else
                            echo -e "${RED}无效的选择，请重试！${NC}"
                        fi
                    done
                fi
                read -n 1 -s -r -p "按任意键返回..."
                ;;
            0) break ;;
            *) echo -e "${RED}无效的选择，请重试！${NC}" ;;
        esac
    done
}

# 主菜单
main_menu() {
    while true; do
    clear
    echo -e "${BOLD_GREEN}\n===== Docker 管理脚本 =====${NC}"
    
    # 显示选项并加上间隔线
    echo -e "${RED}1.${NC} ${BOLD_GREEN}安装 Docker${NC}"
    echo -e "---------------------------"
    
    echo -e "${RED}2.${NC} ${BOLD_GREEN}启动 Docker${NC}"
    echo -e "---------------------------"
    
    echo -e "${RED}3.${NC} ${BOLD_GREEN}停止 Docker${NC}"
    echo -e "---------------------------"
    
    echo -e "${RED}4.${NC} ${BOLD_GREEN}容器管理${NC}"
    echo -e "---------------------------"
    
    echo -e "${RED}5.${NC} ${BOLD_GREEN}镜像管理${NC}"
    echo -e "---------------------------"
    
    echo -e "${RED}0.${NC} ${BOLD_GREEN}退出${NC}"
    echo -e "---------------------------"
    
    read -p "请选择操作: " choice
        
        case $choice in
            1) install_docker ;;
            2) start_docker ;;
            3) stop_docker ;;
            4) container_management ;;
            5) image_management ;;
            0) exit 0 ;;
            *) echo -e "${RED}无效的选择，请重试！${NC}" ;;
        esac
    done
}

# 主程序
check_root
check_system
main_menu
