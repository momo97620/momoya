#!/bin/bash

# Docker管理脚本
# 版本：1.1
# 作者：Assistant
# 描述：提供Docker安装、管理和卸载的一站式脚本

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # 无颜色

# 检查是否为root用户
check_root() {
    if [[ $EUID -ne 0 ]]; then
       echo -e "${RED}错误：此脚本必须以root权限运行！${NC}"
       exit 1
    fi
}

# 系统检测
check_system() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$ID
        VERSION=$VERSION_ID
    else
        echo -e "${RED}无法检测操作系统类型！${NC}"
        exit 1
    fi
}

# 更换Docker源函数
change_docker_source() {
    echo -e "${BLUE}正在更换Docker源...${NC}"
    bash <(curl -sSL https://cdn.jsdelivr.net/gh/SuperManito/LinuxMirrors@main/DockerInstallation.sh)
    echo -e "${GREEN}Docker源更新完成！${NC}"
    read -n 1 -s -r -p "按任意键返回主菜单..."
}

# Docker安装函数
install_docker() {
    echo -e "${BLUE}正在安装Docker...${NC}"
    
    # 根据不同系统选择安装方式
    case $OS in
        ubuntu|debian)
            # 更新软件包
            apt-get update
            apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            
            # 添加Docker官方GPG key
            curl -fsSL https://download.docker.com/linux/$OS/gpg | apt-key add -
            
            # 添加Docker仓库
            add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/$OS $VERSION_CODENAME stable"
            
            # 安装Docker
            apt-get update
            apt-get install -y docker-ce docker-ce-cli containerd.io
            ;;
        
        centos|rhel|fedora)
            # 安装必要的系统工具
            yum install -y yum-utils device-mapper-persistent-data lvm2
            
            # 添加Docker仓库
            yum-config-manager --add-repo https://download.docker.com/linux/$OS/docker-ce.repo
            
            # 安装Docker
            yum install -y docker-ce docker-ce-cli containerd.io
            ;;
        
        *)
            echo -e "${RED}不支持的操作系统！${NC}"
            exit 1
            ;;
    esac

    # 启动并设置开机自启
    systemctl start docker
    systemctl enable docker
    
    echo -e "${GREEN}Docker安装完成！${NC}"
    read -n 1 -s -r -p "按任意键返回主菜单..."
}

# Docker卸载函数
uninstall_docker() {
    echo -e "${YELLOW}正在卸载Docker...${NC}"
    
    case $OS in
        ubuntu|debian)
            apt-get purge -y docker-ce docker-ce-cli containerd.io
            apt-get autoremove -y
            ;;
        
        centos|rhel|fedora)
            yum remove -y docker-ce docker-ce-cli containerd.io
            ;;
    esac

    # 删除Docker数据目录
    rm -rf /var/lib/docker
    
    echo -e "${GREEN}Docker已成功卸载！${NC}"
    read -n 1 -s -r -p "按任意键返回主菜单..."
}

# 容器管理
container_management() {
    while true; do
        echo -e "${BLUE}\n===== 容器管理 =====${NC}"
        echo "1. 列出所有容器"
        echo "2. 启动容器"
        echo "3. 停止容器"
        echo "4. 重启容器"
        echo "5. 删除容器"
        echo "6. 查看容器日志"
        echo "0. 返回主菜单"
        
        read -p "请选择操作: " container_choice
        
        case $container_choice in
            1) docker ps -a ;;
            2) 
                read -p "请输入容器名称或ID: " container
                docker start $container 
                ;;
            3) 
                read -p "请输入容器名称或ID: " container
                docker stop $container 
                ;;
            4) 
                read -p "请输入容器名称或ID: " container
                docker restart $container 
                ;;
            5) 
                read -p "请输入容器名称或ID: " container
                docker rm -f $container 
                ;;
            6) 
                read -p "请输入容器名称或ID: " container
                docker logs $container 
                ;;
            0) break ;;
            *) echo -e "${RED}无效选择！${NC}" ;;
        esac
    done
}

# 镜像管理
image_management() {
    while true; do
        echo -e "${BLUE}\n===== 镜像管理 =====${NC}"
        echo "1. 列出本地镜像"
        echo "2. 拉取镜像"
        echo "3. 删除镜像"
        echo "4. 构建镜像"
        echo "5. 推送镜像到仓库"
        echo "0. 返回主菜单"
        
        read -p "请选择操作: " image_choice
        
        case $image_choice in
            1) docker images ;;
            2) 
                read -p "请输入镜像名称和标签(例如: ubuntu:latest): " image
                docker pull $image 
                ;;
            3) 
                read -p "请输入镜像名称或ID: " image
                docker rmi $image 
                ;;
            4) 
                read -p "请输入Dockerfile所在目录路径: " dockerfile_path
                read -p "请输入镜像名称和标签: " image_name
                docker build -t $image_name $dockerfile_path 
                ;;
            5) 
                read -p "请输入镜像名称: " image
                docker push $image 
                ;;
            0) break ;;
            *) echo -e "${RED}无效选择！${NC}" ;;
        esac
    done
}

# Docker网络管理
network_management() {
    while true; do
        echo -e "${BLUE}\n===== Docker网络管理 =====${NC}"
        echo "1. 列出网络"
        echo "2. 创建网络"
        echo "3. 删除网络"
        echo "0. 返回主菜单"
        
        read -p "请选择操作: " network_choice
        
        case $network_choice in
            1) docker network ls ;;
            2) 
                read -p "请输入网络名称: " network_name
                docker network create $network_name 
                ;;
            3) 
                read -p "请输入网络名称: " network_name
                docker network rm $network_name 
                ;;
            0) break ;;
            *) echo -e "${RED}无效选择！${NC}" ;;
        esac
    done
}

# 主菜单
main_menu() {
    while true; do
        echo -e "${GREEN}\n===== Docker管理脚本 =====${NC}"
        echo "1. 安装Docker"
        echo "2. 卸载Docker"
        echo "3. 容器管理"
        echo "4. 镜像管理"
        echo "5. Docker网络管理"
        echo "6. Docker系统信息"
        echo "7. 更换Docker源"
        echo "0. 退出脚本"
        
        read -p "请选择操作: " choice
        
        case $choice in
            1) install_docker ;;
            2) uninstall_docker ;;
            3) container_management ;;
            4) image_management ;;
            5) network_management ;;
            6) docker info ;;
            7) change_docker_source ;;
            0) 
                echo -e "${YELLOW}感谢使用Docker管理脚本！${NC}"
                exit 0 
                ;;
            *) echo -e "${RED}无效选择！${NC}" ;;
        esac
    done
}

# 脚本入口
main() {
    clear
    check_root
    check_system
    main_menu
}

# 执行主函数
main
