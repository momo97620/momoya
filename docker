#!/bin/bash

# Docker管理脚本
# 版本：1.3
# 作者：emo的小默默
# 描述：提供Docker安装、管理和卸载的一站式脚本

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # 无颜色

# 检查是否为root用户
check_root() {
    if [[ $EUID -ne 0 ]]; then
       echo -e "${RED}错误：此脚本必须以root权限运行！${NC}"
       exit 1
    fi
}

# 系统检测
check_system() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$ID
        VERSION=$VERSION_ID
    else
        echo -e "${RED}无法检测操作系统类型！${NC}"
        exit 1
    fi
}

# 系统更新函数
update_system() {
    # 检查是否已经更新过系统
    if [ ! -f /var/lib/docker_script_updated ]; then
        echo -e "${BLUE}正在更新系统包列表和已安装的包...${NC}"
        case $OS in
            ubuntu|debian)
                apt-get update
                apt-get upgrade -y
                ;;
            centos|rhel|fedora)
                yum update -y
                ;;
        esac

        # 标记系统已经更新
        touch /var/lib/docker_script_updated
        echo -e "${GREEN}系统更新完成！${NC}"
    else
        echo -e "${YELLOW}系统已经是最新状态，无需更新！${NC}"
    fi
}

# 更换Docker源函数
change_docker_source() {
    echo -e "${BLUE}正在更换Docker源...${NC}"
    bash <(curl -sSL https://cdn.jsdelivr.net/gh/SuperManito/LinuxMirrors@main/DockerInstallation.sh)
    echo -e "${GREEN}Docker源更新完成！${NC}"
    read -n 1 -s -r -p "按任意键返回主菜单..."
}

# 检查依赖
check_dependencies() {
    echo -e "${BLUE}正在检查系统依赖...${NC}"
    case $OS in
        ubuntu|debian)
            if ! dpkg -l | grep -q "apt-transport-https\|ca-certificates\|curl\|software-properties-common"; then
                echo -e "${YELLOW}正在安装必要的依赖...${NC}"
                apt-get update
                apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            fi
            ;;
        centos|rhel|fedora)
            if ! rpm -q yum-utils device-mapper-persistent-data lvm2; then
                echo -e "${YELLOW}正在安装必要的依赖...${NC}"
                yum install -y yum-utils device-mapper-persistent-data lvm2
            fi
            ;;
    esac
    echo -e "${GREEN}依赖检查完成！${NC}"
}

# Docker安装函数
install_docker() {
    echo -e "${BLUE}正在安装Docker...${NC}"
    
    # 检查依赖
    check_dependencies

    # 根据不同系统选择安装方式
    case $OS in
        ubuntu|debian)
            # 安装 Docker
            curl -fsSL https://get.docker.com | bash -s docker
            # 安装 Docker Compose
            COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compo
# Docker安装函数
install_docker() {
    echo -e "${BLUE}正在安装Docker...${NC}"
    
    # 检查依赖
    check_dependencies

    # 根据不同系统选择安装方式
    case $OS in
        ubuntu|debian)
            # 安装 Docker
            curl -fsSL https://get.docker.com | bash -s docker
            # 安装 Docker Compose
            COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)
            curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            /usr/local/bin/docker-compose --version
            ;;
        centos|rhel|fedora)
            # 安装 Docker
            yum install -y docker
            # 启动 Docker
            systemctl start docker
            systemctl enable docker
            # 安装 Docker Compose
            COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)
            curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            /usr/local/bin/docker-compose --version
            ;;
    esac
    
    echo -e "${GREEN}Docker 安装完成！${NC}"
    echo -e "${GREEN}Docker Compose 版本: $(/usr/local/bin/docker-compose --version)${NC}"
    read -n 1 -s -r -p "按任意键返回主菜单..."
}

# 启动 Docker 服务
start_docker() {
    systemctl start docker
    systemctl enable docker
    echo -e "${GREEN}Docker 服务已启动！${NC}"
    read -n 1 -s -r -p "按任意键返回主菜单..."
}

# 停止 Docker 服务
stop_docker() {
    systemctl stop docker
    echo -e "${GREEN}Docker 服务已停止！${NC}"
    read -n 1 -s -r 
# 停止 Docker 服务
stop_docker() {
    systemctl stop docker
    echo -e "${GREEN}Docker 服务已停止！${NC}"
    read -n 1 -s -r -p "按任意键返回主菜单..."
}

# 删除 Docker
remove_docker() {
    echo -e "${BLUE}正在卸载 Docker...${NC}"
    case $OS in
        ubuntu|debian)
            apt-get remove --purge -y docker docker-engine docker.io containerd runc
            ;;
        centos|rhel|fedora)
            yum remove -y docker docker-common docker-snapshot
            ;;
    esac
    echo -e "${GREEN}Docker 卸载完成！${NC}"
    read -n 1 -s -r -p "按任意键返回主菜单..."
}

# 查看所有容器并删除
list_and_remove_containers() {
    echo -e "${BLUE}列出所有容器并选择删除...${NC}"
    containers=$(docker ps -a --format "{{.ID}}: {{.Names}}")
    if [ -z "$containers" ]; then
        echo -e "${RED}没有找到任何容器！${NC}"
    else
        echo -e "${GREEN}当前存在以下容器：${NC}"
        echo "$containers"
        echo -e "${YELLOW}请输入容器ID或名称删除（多个容器ID用空格分隔）：${NC}"
        read -r containers_to_delete
        docker rm -f $containers_to_delete
        echo -e "${GREEN}容器删除成功！${NC}"
    fi
    read -n 1 -s -r -p "按任意键返回主菜单..."
}

# 查看所有镜像并删除
list_and_remove_images() {
    echo -e "${BLUE}列出所有镜像并选择删除...${NC}"
    images=$(docker images --format "{{.ID}}: {{.Repository}}:{{.Tag}}")
    if [ -z "$images" ]; then
        echo -e "${RED}没有找到任何镜像！${NC}"
    else
        echo -e "${GREEN}当前存在以下镜像：${NC}"
        echo "$images"
        echo -e "${YELLOW}请输入镜像ID或名称删除（多个镜像ID用空格分隔）：${NC}"
 
# 查看所有镜像并删除
list_and_remove_images() {
    echo -e "${BLUE}列出所有镜像并选择删除...${NC}"
    images=$(docker images --format "{{.ID}}: {{.Repository}}:{{.Tag}}")
    if [ -z "$images" ]; then
        echo -e "${RED}没有找到任何镜像！${NC}"
    else
        echo -e "${GREEN}当前存在以下镜像：${NC}"
        echo "$images"
        echo -e "${YELLOW}请输入镜像ID或名称删除（多个镜像ID用空格分隔）：${NC}"
        read -r images_to_delete
        docker rmi -f $images_to_delete
        echo -e "${GREEN}镜像删除成功！${NC}"
    fi
    read -n 1 -s -r -p "按任意键返回主菜单..."
}

# 主菜单
main_menu() {
    clear
    echo -e "${GREEN}欢迎使用 Docker 管理脚本！${NC}"
    echo -e "${YELLOW}请选择操作：${NC}"
    echo -e "1. 安装 Docker 和 Docker Compose"
    echo -e "2. 启动 Docker 服务"
    echo -e "3. 停止 Docker 服务"
    echo -e "4. 卸载 Docker"
    echo -e "5. 列出并删除容器"
    echo -e "6. 列出并删除镜像"
    echo -e "7. 更换 Docker 源"
    echo -e "8. 更新系统"
    echo -e "9. 退出"
    read -p "请输入你的选择 [1-9]: " choice

    case $choice in
        1) install_docker ;;
        2) start_docker ;;
        3) stop_docker ;;
        4) remove_docker ;;
        5) list_and_remove_containers ;;
        6) list_and_remove_images ;;
        7) change_docker_source ;;
        8) update_system ;;
        9) exit 0 ;;
        *) echo -e "${RED}无效选择，请重新选择！${NC}" && sleep 2 && main_menu ;;
    esac
}

# 检查是否为root用户
check_root

# 系统检测
check_system

# 启动主菜单
main_menu
