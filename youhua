#!/bin/bash
echo "脚本开始执行"
# 系统优化函数定义
optimize_system() {
set -euo pipefail

LOG_FILE="/var/log/server-optimization.log"
BACKUP_DIR="/root/system_backup"

declare release=""
declare -i total_memory_mb=0
declare -i cpu_cores=0
declare -i cpu_threads=0

CSI="\033["
CEND="${CSI}0m"
CRED="${CSI}1;31m"
CGREEN="${CSI}1;32m"
CYELLOW="${CSI}1;33m"
CCYAN="${CSI}1;36m"

OUT_ALERT() { echo -e "${CYELLOW}$1${CEND}" | tee -a "${LOG_FILE}"; }
OUT_ERROR() { echo -e "${CRED}$1${CEND}" | tee -a "${LOG_FILE}"; }
OUT_INFO() { echo -e "${CCYAN}$1${CEND}" | tee -a "${LOG_FILE}"; }
OUT_SUCCESS() { echo -e "${CGREEN}$1${CEND}" | tee -a "${LOG_FILE}"; }

check_location() { 
    OUT_INFO "[信息] 正在检查服务器位置..."
    
    if ! location_info=$(curl -s "https://ipinfo.io"); then
        OUT_ERROR "[错误] 无法获取位置信息，默认使用国际配置"
        echo "false"
        return 1
    fi
    
    local country
    country=$(echo "${location_info}" | grep -o '"country": "[^"]*' | cut -d'"' -f4)
    
    if [ "${country}" = "CN" ]; then
        OUT_INFO "[信息] 检测到服务器位于中国"
        echo "true"
    else
        OUT_INFO "[信息] 检测到服务器位于海外：${country}"
        echo "false"
    fi
}

check_root() { 
    if [ $EUID -ne 0 ]; then
        OUT_ERROR "[错误] 此脚本需要root权限运行"
        return 1
    fi
}

check_system() { 
    if [ -f /etc/os-release ]; then
        source /etc/os-release
        if echo "${ID}" | grep -qi "debian"; then
            release="debian"
            return 0
        elif echo "${ID}" | grep -qi "ubuntu"; then
            release="ubuntu"
            return 0
        elif echo "${ID}" | grep -qi "centos|rhel|fedora"; then
            release="centos"
            return 0
        fi
    fi
    
    if [ -f /etc/redhat-release ]; then
        release="centos"
        return 0
    fi
    
    if [ -f /etc/debian_version ]; then
        release="debian"
        return 0
    fi
    
    if grep -qi "debian" /etc/issue; then
        release="debian"
        return 0
    fi
    
    if grep -qi "ubuntu" /etc/issue; then
        release="ubuntu"
        return 0
    fi
    
    if grep -qi "centos|red hat|redhat" /etc/issue; then
        release="centos"
        return 0
    fi
    
    OUT_ERROR "[错误] 不支持的操作系统！"
    OUT_INFO "系统信息："
    if [ -f /etc/os-release ]; then
        cat /etc/os-release
    fi
    return 1
}

detect_cpu() {
    OUT_INFO "[信息] 检测CPU配置..."
    
    if [ ! -f /proc/cpuinfo ]; then
        OUT_ERROR "[错误] 无法访问 /proc/cpuinfo"
        return 1
    fi
    
    cpu_cores=$(grep "cpu cores" /proc/cpuinfo | uniq | awk '{print $4}')
    if [ -z "$cpu_cores" ]; then
        OUT_ERROR "[错误] 无法获取CPU核心数"
        return 1
    fi
    
    cpu_threads=$(grep "siblings" /proc/cpuinfo | uniq | awk '{print $3}')
    if [ -z "$cpu_threads" ]; then
        cpu_threads=$(grep -c processor /proc/cpuinfo)
    fi
    
    local cpu_model
    cpu_model=$(grep "model name" /proc/cpuinfo | head -n1 | cut -d':' -f2 | tr -s ' ')
    
    OUT_INFO "[信息] CPU型号: ${cpu_model}"
    OUT_INFO "[信息] CPU物理核心数: ${cpu_cores}"
    OUT_INFO "[信息] CPU逻辑核心数: ${cpu_threads}"
}

detect_memory() {
    OUT_INFO "[信息] 检测内存配置..."
    
    if [ -f /proc/meminfo ]; then
        total_memory_mb=$(grep MemTotal /proc/meminfo | awk '{print int($2/1024)}')
    else
        OUT_ERROR "[错误] 无法检测内存大小"
        return 1
    fi
    
    OUT_INFO "[信息] 总内存: ${total_memory_mb}MB"
}

install_requirements() { 
    OUT_INFO "[信息] 安装必要工具..."
    
    if [ "${release}" = "centos" ]; then
        if ! yum install -y epel-release; then
            OUT_ERROR "[错误] 安装 epel-release 失败"
            return 1
        fi
        
        if ! yum install -y wget curl chrony; then
            OUT_ERROR "[错误] 安装必要工具失败"
            return 1
        fi
    else
        if ! apt-get update; then
            OUT_ERROR "[错误] 更新软件源失败"
            return 1
        fi
        
        if ! apt-get install -y wget curl chrony; then
            OUT_ERROR "[错误] 安装必要工具失败"
            return 1
        fi
    fi
    
    OUT_SUCCESS "[成功] 工具安装完成"
    return 0
}

configure_dns() { 
    OUT_INFO "配置系统DNS..."
    
    local is_in_china
    is_in_china=$(check_location)

    if [ ! -d "${BACKUP_DIR}" ]; then
        if ! mkdir -p "${BACKUP_DIR}"; then
            OUT_ERROR "无法创建备份目录：${BACKUP_DIR}"
            return 1
        fi
    fi

    if [ -L /etc/resolv.conf ]; then
        if ! rm -f /etc/resolv.conf; then
            OUT_ERROR "无法删除 resolv.conf 符号链接"
            return 1
        fi
    fi
    
    if [ -f /etc/resolv.conf ]; then
        chattr -i /etc/resolv.conf 2>/dev/null || true
        if ! mv /etc/resolv.conf "${BACKUP_DIR}/resolv.conf.bak"; then
            OUT_ERROR "无法备份 /etc/resolv.conf 文件"
            return 1
        fi
    fi

    if [ "${is_in_china}" = "true" ]; then
        if ! cat > /etc/resolv.conf << 'EOF'
options timeout:2 attempts:3 rotate
nameserver 223.5.5.5
nameserver 223.6.6.6
nameserver 119.29.29.29
nameserver 180.76.76.76
EOF
        then
            OUT_ERROR "无法写入DNS配置"
            return 1
        fi
        OUT_INFO "已配置国内DNS"
    else
        if ! cat > /etc/resolv.conf << 'EOF'
options timeout:2 attempts:3 rotate
nameserver 1.1.1.1
nameserver 8.8.8.8
nameserver 9.9.9.9
nameserver 208.67.222.222
EOF
        then
            OUT_ERROR "无法写入DNS配置"
            return 1
        fi
        OUT_INFO "已配置国际DNS"
    fi

    if ! chattr +i /etc/resolv.conf; then
        OUT_ERROR "无法设置 /etc/resolv.conf 为只读"
        return 1
    fi

    OUT_SUCCESS "DNS配置完成"
    return 0
}

configure_ntp() { 
    OUT_INFO "配置NTP时间同步..."
    
    local is_in_china
    is_in_china=$(check_location)

    NTP_SERVICE="chrony.service"

    if [ "${is_in_china}" = "true" ]; then
        if ! cat > /etc/chrony.conf << 'EOF'
server ntp.aliyun.com iburst
server cn.ntp.org.cn iburst
server ntp.tencent.com iburst
driftfile /var/lib/chrony/drift
makestep 1.0 3
rtcsync
logdir /var/log/chrony
EOF
        then
            OUT_ERROR "无法写入 chrony 配置文件"
            return 1
        fi
        OUT_INFO "已配置国内NTP服务器"
    else
        if ! cat > /etc/chrony.conf << 'EOF'
pool pool.ntp.org iburst
pool time.google.com iburst
pool time.cloudflare.com iburst
driftfile /var/lib/chrony/drift
makestep 1.0 3
rtcsync
logdir /var/log/chrony
EOF
        then
            OUT_ERROR "无法写入 chrony 配置文件"
            return 1
        fi
        OUT_INFO "已配置国际NTP服务器"
    fi

    if ! systemctl enable "${NTP_SERVICE}"; then
        OUT_ERROR "无法启用 NTP 服务：${NTP_SERVICE}"
        return 1
    fi
    
    if ! systemctl restart "${NTP_SERVICE}"; then
        OUT_ERROR "无法重启 NTP 服务：${NTP_SERVICE}"
        return 1
    fi

    OUT_SUCCESS "NTP配置完成"
    return 0
}

generate_optimization_params() {
    local mem_gb=$((total_memory_mb/1024))
    local params=""
    
    if [ $total_memory_mb -eq 0 ] || [ $cpu_cores -eq 0 ]; then
        OUT_ALERT "[警告] 无法检测硬件配置，使用保守参数配置"
        params="net.ipv4.tcp_mem = 98304 131072 196608
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 87380 16777216
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.core.rmem_default = 262144
net.core.wmem_default = 262144
net.core.netdev_max_backlog = 5000
net.core.somaxconn = 1024"
        echo "${params}"
        return 0
    fi
    
    if [ $mem_gb -le 4 ]; then
        params="net.ipv4.tcp_mem = 131072 196608 262144
net.ipv4.tcp_rmem = 4096 131072 33554432
net.ipv4.tcp_wmem = 4096 131072 33554432
net.core.rmem_max = 33554432
net.core.wmem_max = 33554432
net.core.rmem_default = 524288
net.core.wmem_default = 524288"
    elif [ $mem_gb -le 16 ]; then
        params="net.ipv4.tcp_mem = 1048576 1572864 2097152
net.ipv4.tcp_rmem = 4096 262144 67108864
net.ipv4.tcp_wmem = 4096 262144 67108864
net.core.rmem_max = 67108864
net.core.wmem_max = 67108864
net.core.rmem_default = 1048576
net.core.wmem_default = 1048576"
    else
        params="net.ipv4.tcp_mem = 2097152 3145728 4194304
net.ipv4.tcp_rmem = 4096 524288 134217728
net.ipv4.tcp_wmem = 4096 524288 134217728
net.core.rmem_max = 134217728
net.core.wmem_max = 134217728
net.core.rmem_default = 2097152
net.core.wmem_default = 2097152"
    fi
    
    if [ $cpu_cores -le 2 ]; then
        params="${params}
net.core.netdev_max_backlog = 10000
net.core.somaxconn = 2048"
    elif [ $cpu_cores -le 4 ]; then
        params="${params}
net.core.netdev_max_backlog = 30000
net.core.somaxconn = 8192"
    else
        params="${params}
net.core.netdev_max_backlog = 100000
net.core.somaxconn = 65535"
    fi
    
    echo "${params}"
    return 0
}

optimize_system() { 
    OUT_INFO "[信息] 优化系统参数..."
    
    if ! detect_cpu || ! detect_memory; then
        OUT_ERROR "[错误] 硬件检测失败"
        return 1
    fi
    
    if [ -f /etc/sysctl.conf ] && \
       ! cp -f /etc/sysctl.conf "${BACKUP_DIR}/sysctl.conf.bak"; then
        OUT_ERROR "[错误] 无法备份sysctl.conf"
        return 1
    fi
    
    local optimization_params
    optimization_params=$(generate_optimization_params)
    
    if ! cat > /etc/sysctl.conf << EOF
net.ipv4.ip_forward = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_fin_timeout = 15
net.ipv4.tcp_keepalive_time = 300
net.ipv4.tcp_keepalive_intvl = 20
net.ipv4.tcp_keepalive_probes = 3
net.ipv4.ip_local_port_range = 1024 65535
net.ipv4.tcp_max_tw_buckets = 550000
net.ipv4.tcp_max_syn_backlog = 30000
net.ipv4.tcp_mtu_probing = 1
net.ipv4.tcp_fastopen = 3

${optimization_params}

net.ipv4.tcp_congestion_control = bbr
net.core.default_qdisc = fq
net.ipv4.tcp_slow_start_after_idle = 0
net.ipv4.tcp_no_metrics_save = 1
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_sack = 1
net.ipv4.tcp_dsack = 1

net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0

fs.file-max = 2097152
fs.nr_open = 2097152
fs.inotify.max_user_instances = 8192
fs.inotify.max_user_watches = 524288
fs.pipe-max-size = 1048576

vm.swappiness = 10
vm.min_free_kbytes = 65536
vm.overcommit_memory = 1
vm.max_map_count = 262144
EOF
    then
        OUT_ERROR "[错误] 无法写入sysctl配置"
        return 1
    fi

    if [ -f /etc/security/limits.conf ] && \
       ! cp -f /etc/security/limits.conf "${BACKUP_DIR}/limits.conf.bak"; then
        OUT_ERROR "[错误] 无法备份limits.conf"
        return 1
    fi
    
    if ! cat > /etc/security/limits.conf << 'EOF'
* soft nofile 2097152
* hard nofile 2097152
* soft nproc 2097152
* hard nproc 2097152
root soft nofile 2097152
root hard nofile 2097152
root soft nproc 2097152
root hard nproc 2097152
* soft memlock unlimited
* hard memlock unlimited
EOF
    then
        OUT_ERROR "[错误] 无法写入limits配置"
        return 1
    fi
    
    if [ -f /etc/pam.d/common-session ]; then
        if ! grep -q '^session.*pam_limits.so$' /etc/pam.d/common-session; then
            if ! echo "session required pam_limits.so" >> /etc/pam.d/common-session; then
                OUT_ERROR "[错误] 无法配置PAM加载limits"
                return 1
            fi
        fi
    fi
    
    if ! sysctl -p; then
        OUT_ERROR "[错误] 应用sysctl参数失败"
        return 1
    fi
    
    OUT_SUCCESS "[成功] 系统参数优化完成"
    return 0
}

main() { 
    OUT_INFO "[信息] 开始系统优化..."
    
    if ! mkdir -p "${BACKUP_DIR}"; then
        OUT_ERROR "[错误] 无法创建备份目录"
        exit 1
    fi
    
    if ! check_root; then
        OUT_ERROR "[错误] Root 权限检查失败"
        exit 1
    fi
    
    if ! check_system; then
        OUT_ERROR "[错误] 系统检查失败"
        exit 1
    fi
    
    if ! install_requirements; then
        OUT_ERROR "[错误] 安装必要工具失败"
        exit 1
    fi
    
    if ! configure_dns; then
        OUT_ERROR "[错误] DNS配置失败"
        exit 1
    fi
    
    if ! configure_ntp; then
        OUT_ERROR "[错误] NTP配置失败"
        exit 1
    fi
    
    if ! optimize_system; then
        OUT_ERROR "[错误] 系统参数优化失败"
        exit 1
    fi
    
    OUT_SUCCESS "[成功] 系统优化完成！"
    OUT_INFO "[信息] 建议重启系统使所有优化生效" 
    
    }
}
# 调用函数
optimize_system