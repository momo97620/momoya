#!/bin/bash
echo "脚本开始执行"

# 系统优化函数定义
optimize_system() {
    set -euo pipefail

    LOG_FILE="/var/log/server-optimization.log"
    BACKUP_DIR="/root/system_backup"

    declare release=""
    declare -i total_memory_mb=0
    declare -i cpu_cores=0
    declare -i cpu_threads=0

    CSI="\033["
    CEND="${CSI}0m"
    CRED="${CSI}1;31m"
    CGREEN="${CSI}1;32m"
    CYELLOW="${CSI}1;33m"
    CCYAN="${CSI}1;36m"

    OUT_ALERT() { echo -e "${CYELLOW}$1${CEND}" | tee -a "${LOG_FILE}"; }
    OUT_ERROR() { echo -e "${CRED}$1${CEND}" | tee -a "${LOG_FILE}"; }
    OUT_INFO() { echo -e "${CCYAN}$1${CEND}" | tee -a "${LOG_FILE}"; }
    OUT_SUCCESS() { echo -e "${CGREEN}$1${CEND}" | tee -a "${LOG_FILE}"; }

    check_location() { 
        OUT_INFO "[信息] 正在检查服务器位置..."
        
        if ! location_info=$(curl -s "https://ipinfo.io"); then
            OUT_ERROR "[错误] 无法获取位置信息，默认使用国际配置"
            echo "false"
            return 1
        fi
        
        local country
        country=$(echo "${location_info}" | grep -o '"country": "[^"]*' | cut -d'"' -f4)
        
        if [ "${country}" = "CN" ]; then
            OUT_INFO "[信息] 检测到服务器位于中国"
            echo "true"
        else
            OUT_INFO "[信息] 检测到服务器位于海外：${country}"
            echo "false"
        fi
    }

    check_root() { 
        if [ $EUID -ne 0 ]; then
            OUT_ERROR "[错误] 此脚本需要root权限运行"
            return 1
        fi
    }

    check_system() { 
        if [ -f /etc/os-release ]; then
            source /etc/os-release
            if echo "${ID}" | grep -qi "debian"; then
                release="debian"
                return 0
            elif echo "${ID}" | grep -qi "ubuntu"; then
                release="ubuntu"
                return 0
            elif echo "${ID}" | grep -qi "centos|rhel|fedora"; then
                release="centos"
                return 0
            fi
        fi
        
        if [ -f /etc/redhat-release ]; then
            release="centos"
            return 0
        fi
        
        if [ -f /etc/debian_version ]; then
            release="debian"
            return 0
        fi
        
        if grep -qi "debian" /etc/issue; then
            release="debian"
            return 0
        fi
        
        if grep -qi "ubuntu" /etc/issue; then
            release="ubuntu"
            return 0
        fi
        
        if grep -qi "centos|red hat|redhat" /etc/issue; then
            release="centos"
            return 0
        fi
        
        OUT_ERROR "[错误] 不支持的操作系统！"
        OUT_INFO "系统信息："
        if [ -f /etc/os-release ]; then
            cat /etc/os-release
        fi
        return 1
    }

    detect_cpu() {
        OUT_INFO "[信息] 检测CPU配置..."
        
        if [ ! -f /proc/cpuinfo ]; then
            OUT_ERROR "[错误] 无法访问 /proc/cpuinfo"
            return 1
        fi
        
        cpu_cores=$(grep "cpu cores" /proc/cpuinfo | uniq | awk '{print $4}')
        if [ -z "$cpu_cores" ]; then
            OUT_ERROR "[错误] 无法获取CPU核心数"
            return 1
        fi
        
        cpu_threads=$(grep "siblings" /proc/cpuinfo | uniq | awk '{print $3}')
        if [ -z "$cpu_threads" ]; then
            cpu_threads=$(grep -c processor /proc/cpuinfo)
        fi
        
        local cpu_model
        cpu_model=$(grep "model name" /proc/cpuinfo | head -n1 | cut -d':' -f2 | tr -s ' ')
        
        OUT_INFO "[信息] CPU型号: ${cpu_model}"
        OUT_INFO "[信息] CPU物理核心数: ${cpu_cores}"
        OUT_INFO "[信息] CPU逻辑核心数: ${cpu_threads}"
    }

    detect_memory() {
        OUT_INFO "[信息] 检测内存配置..."
        
        if [ -f /proc/meminfo ]; then
            total_memory_mb=$(grep MemTotal /proc/meminfo | awk '{print int($2/1024)}')
        else
            OUT_ERROR "[错误] 无法检测内存大小"
            return 1
        fi
        
        OUT_INFO "[信息] 总内存: ${total_memory_mb}MB"
    }

    install_requirements() { 
        OUT_INFO "[信息] 安装必要工具..."
        
        if [ "${release}" = "centos" ]; then
            if ! yum install -y epel-release; then
                OUT_ERROR "[错误] 安装 epel-release 失败"
                return 1
            fi
            
            if ! yum install -y wget curl chrony; then
                OUT_ERROR "[错误] 安装必要工具失败"
                return 1
            fi
        else
            if ! apt-get update; then
                OUT_ERROR "[错误] 更新软件源失败"
                return 1
            fi
            
            if ! apt-get install -y wget curl chrony; then
                OUT_ERROR "[错误] 安装必要工具失败"
                return 1
            fi
        fi
        
        OUT_SUCCESS "[成功] 工具安装完成"
        return 0
    }

    configure_dns() { 
        OUT_INFO "配置系统DNS..."
        
        local is_in_china
        is_in_china=$(check_location)

        if [ ! -d "${BACKUP_DIR}" ]; then
            if ! mkdir -p "${BACKUP_DIR}"; then
                OUT_ERROR "无法创建备份目录：${BACKUP_DIR}"
                return 1
            fi
        fi

        if [ -L /etc/resolv.conf ]; then
            if ! rm -f /etc/resolv.conf; then
                OUT_ERROR "无法删除 resolv.conf 符号链接"
                return 1
            fi
        fi
        
        if [ -f /etc/resolv.conf ]; then
            chattr -i /etc/resolv.conf 2>/dev/null ||        vm.swappiness = 10
        vm.min_free_kbytes = 65536
        vm.overcommit_memory = 1
        vm.max_map_count = 262144
EOF
        then
            OUT_ERROR "[错误] 无法写入sysctl配置"
            return 1
        fi

        if [ -f /etc/security/limits.conf ] && \
           ! cp -f /etc/security/limits.conf "${BACKUP_DIR}/limits.conf.bak"; then
            OUT_ERROR "[错误] 无法备份limits.conf"
            return 1
        fi
        
        if ! cat > /etc/security/limits.conf << 'EOF'
* soft nofile 2097152
* hard nofile 2097152
* soft nproc 2097152
* hard nproc 2097152
root soft nofile 2097152
root hard nofile 2097152
root soft nproc 2097152
root hard nproc 2097152
* soft memlock unlimited
* hard memlock unlimited
EOF
        then
            OUT_ERROR "[错误] 无法写入limits配置"
            return 1
        fi
        
        if [ -f /etc/pam.d/common-session ]; then
            if ! grep -q '^session.*pam_limits.so$' /etc/pam.d/common-session; then
                if ! echo "session required pam_limits.so" >> /etc/pam.d/common-session; then
                    OUT_ERROR "[错误] 无法配置PAM加载limits"
                    return 1
                fi
            fi
        fi
        
        if ! sysctl -p; then
            OUT_ERROR "[错误] 应用sysctl参数失败"
            return 1
        fi
        
        OUT_SUCCESS "[成功] 系统参数优化完成"
        return 0
    }

    main() { 
        OUT_INFO "[信息] 开始系统优化..."
        
        if ! mkdir -p "${BACKUP_DIR}"; then
            OUT_ERROR "[错误] 无法创建备份目录"
            exit 1
        fi
        
        if ! check_root; then
            OUT_ERROR "[错误] Root 权限检查失败"
            exit 1
        fi
        
        if ! check_system; then
            OUT_ERROR "[错误] 系统检查失败"
            exit 1
        fi
        
        if ! install_requirements; then
            OUT_ERROR "[错误] 安装必要工具失败"
            exit 1
        fi
        
        if ! configure_dns; then
            OUT_ERROR "[错误] DNS配置失败"
            exit 1
        fi
        
        if ! configure_ntp; then
            OUT_ERROR "[错误] NTP配置失败"
            exit 1
        fi
        
        if ! optimize_system; then
            OUT_ERROR "[错误] 系统参数优化失败"
            exit 1
        fi
        
        OUT_SUCCESS "[成功] 系统优化完成！"
        OUT_INFO "[信息] 建议重启系统使所有优化生效" 
    }

# 调用主函数
main