#!/bin/bash

# 定义变量
BACKUP_DIR="/root/backup"
ONEDRIVE_DIR="/root/onedrive"
MAX_BACKUPS=3
TIMESTAMP=$(date +"%Y%m%d%H%M%S")
BACKUP_FILE="backup_$TIMESTAMP.tar.gz"
DOCKER_BACKUP_FILE="docker_backup_$TIMESTAMP.tar.gz"

# 创建目录
mkdir -p "$BACKUP_DIR"
mkdir -p "$ONEDRIVE_DIR"

# 检查 Rclone 是否已安装
check_rclone_installed() {
    if ! command -v rclone &>/dev/null; then
        echo "Rclone 未安装，请手动安装！"
        exit 1
    else
        echo "Rclone 已安装，跳过安装。"
    fi
}

# 配置 Rclone
configure_rclone() {
    echo "配置 Rclone..."
    rclone config || {
        echo "Rclone 配置失败，请手动检查！"
        exit 1
    }
    echo "Rclone 配置完成。"
}

# 执行备份操作
perform_backup() {
    echo "执行备份操作..."
    tar -czf "$BACKUP_DIR/$BACKUP_FILE" -C "$BACKUP_DIR" . || {
        echo "备份失败，请检查路径和权限！"
        exit 1
    }
    echo "备份完成，文件保存在 $BACKUP_DIR/$BACKUP_FILE"
}

# Docker 容器备份
docker_backup() {
    echo "备份 Docker 容器数据..."
    docker ps -q | xargs -r docker export | gzip > "$BACKUP_DIR/$DOCKER_BACKUP_FILE" || {
        echo "Docker 备份失败，请检查 Docker 状态！"
        exit 1
    }
    echo "Docker 容器备份完成，文件保存在 $BACKUP_DIR/$DOCKER_BACKUP_FILE"
}

# 备份清理
cleanup_backups() {
    echo "清理过期备份..."
    BACKUP_COUNT=$(ls "$BACKUP_DIR" | grep "backup_" | wc -l)

    if [ "$BACKUP_COUNT" -gt "$MAX_BACKUPS" ]; then
        OLDEST_BACKUP=$(ls -t "$BACKUP_DIR" | grep "backup_" | tail -n 1)
        rm "$BACKUP_DIR/$OLDEST_BACKUP" || {
            echo "删除过期备份失败！"
            exit 1
        }
        echo "已删除过期备份文件：$OLDEST_BACKUP"
    else
        echo "备份文件数量未超过最大限制，无需删除。"
    fi
}

# 查看已备份文件
list_backups() {
    echo "已备份文件列表："
    ls -lh "$BACKUP_DIR" | grep "backup_"
}

# 显示菜单
show_menu() {
    echo -e "\n菜单："
    echo "1. 配置 Rclone"
    echo "2. 执行备份"
    echo "3. 备份 Docker 容器"
    echo "4. 清理过期备份"
    echo "5. 查看已备份文件"
    echo "0. 退出"
}

# 菜单
menu() {
    while true; do
        show_menu
        read -p "选择操作: " choice
        case $choice in
            1)
                configure_rclone
                ;;
            2)
                perform_backup
                ;;
            3)
                docker_backup
                ;;
            4)
                cleanup_backups
                ;;
            5)
                list_backups
                ;;
            0)
                echo "退出。"
                break
                ;;
            *)
                echo "无效选项，请重新选择！"
                ;;
        esac
        read -n 1 -s -r -p "按任意键返回菜单..."
    done
}

# 脚本开始时先检查 Rclone 是否安装
check_rclone_installed

# 启动菜单
menu