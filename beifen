#!/bin/bash

# 定义变量
BACKUP_DIR="/root/backup"
ONEDRIVE_DIR="/root/onedrive"
MAX_BACKUPS=3
TIMESTAMP=$(date +"%Y%m%d%H%M%S")
BACKUP_FILE="backup_$TIMESTAMP.tar.gz"
DOCKER_BACKUP_FILE="docker_backup_$TIMESTAMP.tar.gz"

# 创建目录
mkdir -p "$BACKUP_DIR"
mkdir -p "$ONEDRIVE_DIR"

# 检查 Rclone 是否已安装
check_rclone_installed() {
    if ! command -v rclone &>/dev/null; then
        echo "Rclone 未安装，正在安装..."
        install_rclone
    else
        echo "Rclone 已安装，跳过安装。"
    fi
}

# 安装必要的依赖项
install_dependencies() {
    echo "检查并安装必要的依赖项..."

    # 更新软件源并清理缓存
    echo "更新软件源..."
    apt-get update || {
        echo "更新软件源失败，请检查网络连接！"
        exit 1
    }

    # 清理 APT 缓存
    echo "清理 APT 缓存..."
    apt-get clean || {
        echo "清理 APT 缓存失败！"
        exit 1
    }

    # 修复损坏的包
    echo "修复损坏的包..."
    apt-get install -f || {
        echo "修复损坏包失败！"
        exit 1
    }

    # 安装依赖项
    echo "安装依赖：curl wget"
    apt-get install -y curl wget || {
        echo "依赖安装失败，请检查网络连接或手动安装！"
        exit 1
    }
    echo "依赖项安装完成。"
}

# 安装 Rclone 工具
install_rclone() {
    echo "下载并安装 Rclone..."
    curl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip || {
        echo "下载 Rclone 失败，请检查网络连接！"
        exit 1
    }
    unzip rclone-current-linux-amd64.zip || {
        echo "解压 Rclone 失败！"
        exit 1
    }
    cd rclone-*-linux-amd64 || exit
    cp rclone /usr/local/bin/ || {
        echo "复制 Rclone 失败！"
        exit 1
    }
    chmod 755 /usr/local/bin/rclone
    echo "Rclone 工具安装完成，版本: $(rclone --version)"
    cd ..
    rm -rf rclone-*-linux-amd64 rclone-current-linux-amd64.zip
}

# 配置 Rclone
configure_rclone() {
    echo "配置 Rclone..."
    rclone config || {
        echo "Rclone 配置失败，请手动检查！"
        exit 1
    }
    echo "Rclone 配置完成。"
}

# 执行备份操作
perform_backup() {
    echo "执行备份操作..."
    tar -czf "$BACKUP_DIR/$BACKUP_FILE" "$BACKUP_DIR" || {
        echo "备份失败，请检查路径和权限！"
        exit 1
    }
    echo "备份完成，文件保存在 $BACKUP_DIR/$BACKUP_FILE"
}

# Docker 容器备份
docker_backup() {
    echo "备份 Docker 容器数据..."
    docker ps -q | xargs -r docker export | gzip > "$BACKUP_DIR/$DOCKER_BACKUP_FILE" || {
        echo "Docker 备份失败，请检查 Docker 状态！"
        exit 1
    }
    echo "Docker 容器备份完成，文件保存在 $BACKUP_DIR/$DOCKER_BACKUP_FILE"
}

# 备份清理
cleanup_backups() {
    echo "清理过期备份..."
    BACKUP_COUNT=$(ls "$BACKUP_DIR" | grep "backup_" | wc -l)

    if [ "$BACKUP_COUNT" -gt "$MAX_BACKUPS" ]; then
        OLDEST_BACKUP=$(ls -t "$BACKUP_DIR" | grep "backup_" | tail -n 1)
        rm "$BACKUP_DIR/$OLDEST_BACKUP" || {
            echo "删除过期备份失败！"
            exit 1
        }
        echo "已删除过期备份文件：$OLDEST_BACKUP"
    else
        echo "备份文件数量未超过最大限制，无需删除。"
    fi
}

# 菜单
menu() {
    echo "1. 安装依赖"
    echo "2. 安装 Rclone"
    echo "3. 配置 Rclone"
    echo "4. 执行备份"
    echo "5. 备份 Docker 容器"
    echo "6. 清理过期备份"
    echo "0. 退出"
    while true; do
        read -p "选择操作: " choice
        case $choice in
            1)
                install_dependencies
                ;;
            2)
                check_rclone_installed
                ;;
            3)
                configure_rclone
                ;;
            4)
                perform_backup
                ;;
            5)
                docker_backup
                ;;
            6)
                cleanup_backups
                ;;
            0)
                echo "退出。"
                break
                ;;
            *)
                echo "无效选项，请重新选择！"
                ;;
        esac
    done
}

menu
