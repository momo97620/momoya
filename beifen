#!/bin/bash

# 定义变量
BACKUP_DIR="/root/backup"      # 本地备份目录
ONEDRIVE_DIR="/root/onedrive" # 本地OneDrive同步目录
MAX_BACKUPS=3                 # 最大保留备份数量
TIMESTAMP=$(date +"%Y%m%d%H%M%S")
BACKUP_FILE="backup_$TIMESTAMP.tar.gz"
DOCKER_BACKUP_FILE="docker_backup_$TIMESTAMP.tar.gz"

# 创建备份目录
mkdir -p "$BACKUP_DIR"
mkdir -p "$ONEDRIVE_DIR"

# 检测 OneDrive 工具是否安装
install_or_update_onedrive() {
    echo "检测 OneDrive 同步工具..."
    if ! command -v onedrive &> /dev/null; then
        echo "未安装 OneDrive，同步工具将安装最新版本..."
        install_latest_onedrive
    else
        CURRENT_VERSION=$(onedrive --version | awk '{print $3}')
        echo "检测到已安装版本: $CURRENT_VERSION"
        # 最新版本号从 abraunegg 的 GitHub 获取
        LATEST_VERSION=$(curl -s https://api.github.com/repos/abraunegg/onedrive/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
        if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "当前版本不是最新版本 ($CURRENT_VERSION < $LATEST_VERSION)，正在更新..."
            install_latest_onedrive
        else
            echo "OneDrive 已是最新版本 ($CURRENT_VERSION)，跳过安装。"
        fi
    fi
}

# 安装最新的 OneDrive 工具
install_latest_onedrive() {
    echo "检测磁盘空间..."
    if [ "$(df / | tail -1 | awk '{print $4}')" -lt 1048576 ]; then
        echo "磁盘空间不足，请清理磁盘后重试！"
        exit 1
    fi

    echo "修复系统依赖..."
    apt --fix-broken install -y

    echo "安装最新的 OneDrive 同步工具..."
    apt remove --purge onedrive -y
    apt update
    apt install -y git gcc g++ make pkg-config curl libcurl4-openssl-dev \
        libsqlite3-dev libnotify-dev libssl-dev zlib1g-dev ldc || {
        echo "D 编译器安装失败，请检查依赖问题！"
        exit 1
    }

    rm -rf /root/onedrive_source
    mkdir -p /home/onedrive_source
    git clone https://github.com/abraunegg/onedrive.git /home/onedrive_source
    cd /home/onedrive_source || exit
    ./configure
    make
    make install

    # 强制覆盖旧版本
    if [ -f /usr/local/bin/onedrive ]; then
        cp /usr/local/bin/onedrive /usr/bin/onedrive
    fi
    echo "OneDrive 工具安装完成，版本：$(onedrive --version)"
}
# 执行 OneDrive 认证
configure_onedrive() {
    echo "配置 OneDrive 账户授权..."
    if [ ! -f ~/.config/onedrive/refresh_token ]; then
        onedrive --authenticate
        if [ $? -ne 0 ]; then
            echo "OneDrive 授权失败，请检查网络或账户信息。"
            exit 1
        fi
    else
        echo "已检测到 OneDrive 授权，无需重复配置。"
    fi
}

# 启动 OneDrive 同步服务
start_onedrive_sync() {
    echo "启动 OneDrive 同步服务..."
    systemctl --user enable onedrive
    export XDG_RUNTIME_DIR=/run/user/$(id -u)
    systemctl --user start onedrive
    echo "OneDrive 同步服务已启动。"
}

# 普通数据备份
backup_system() {
    echo "开始备份系统数据..."
    tar -czf "$BACKUP_DIR/$BACKUP_FILE" /etc /home /var/log 2>/dev/null
    echo "系统数据备份完成: $BACKUP_FILE"
}

# Docker 数据备份
backup_docker() {
    echo "开始备份 Docker 数据..."
    mkdir -p "$BACKUP_DIR/docker_containers"
    for container in $(docker ps -q); do
        docker export "$container" > "$BACKUP_DIR/docker_containers/${container}_backup.tar"
        echo "容器已备份: $container"
    done
    docker save $(docker images -q) -o "$BACKUP_DIR/docker_images.tar"
    echo "Docker 镜像已备份。"
    tar -czf "$BACKUP_DIR/$DOCKER_BACKUP_FILE" -C "$BACKUP_DIR" docker_containers docker_images.tar
    echo "Docker 数据备份完成: $DOCKER_BACKUP_FILE"
    rm -rf "$BACKUP_DIR/docker_containers" "$BACKUP_DIR/docker_images.tar"
}

# 上传备份到 OneDrive
upload_to_onedrive() {
    echo "上传备份到 OneDrive..."
    cp "$BACKUP_DIR/$BACKUP_FILE" "$ONEDRIVE_DIR/"
    cp "$BACKUP_DIR/$DOCKER_BACKUP_FILE" "$ONEDRIVE_DIR/"
    echo "检查并限制 OneDrive 备份文件数量..."
    while [ $(ls "$ONEDRIVE_DIR"/backup_*.tar.gz 2>/dev/null | wc -l) -gt $MAX_BACKUPS ]; do
        OLDEST_FILE=$(ls "$ONEDRIVE_DIR"/backup_*.tar.gz | head -n 1)
        rm -f "$OLDEST_FILE"
        echo "已删除旧备份: $OLDEST_FILE"
    done
    while [ $(ls "$ONEDRIVE_DIR"/docker_backup_*.tar.gz 2>/dev/null | wc -l) -gt $MAX_BACKUPS ]; do
        OLDEST_DOCKER_FILE=$(ls "$ONEDRIVE_DIR"/docker_backup_*.tar.gz | head -n 1)
        rm -f "$OLDEST_DOCKER_FILE"
        echo "已删除旧 Docker 备份: $OLDEST_DOCKER_FILE"
    done
    onedrive --synchronize
    echo "备份上传完成。"
}

# 菜单界面
menu() {
    while true; do
        clear
        echo "====================="
        echo "  VPS 备份管理工具"
        echo "====================="
        echo "1. 备份系统数据"
        echo "2. 备份 Docker 数据"
        echo "3. 查看备份文件"
        echo "4. 配置 OneDrive"
        echo "0. 退出"
        echo "====================="
        read -p "请输入选项: " choice
        case $choice in
            1)
                backup_system
                upload_to_onedrive
                read -p "按任意键返回菜单..."
                ;;
            2)
                backup_docker
                upload_to_onedrive
                read -p "按任意键返回菜单..."
                ;;
            3)
                echo "本地备份文件："
                ls -lh "$BACKUP_DIR" | grep "backup_"
                echo "OneDrive备份文件："
                ls -lh "$ONEDRIVE_DIR" | grep "backup_"
                read -p "按任意键返回菜单..."
                ;;
            4)
                install_or_update_onedrive
                configure_onedrive
                start_onedrive_sync
                read -p "按任意键返回菜单..."
                ;;
            0)
                echo "退出工具。"
                break
                ;;
            *)
                echo "无效选项，请重新输入。"
                sleep 2
                ;;
        esac
    done
}

# 主程序入口
install_or_update_onedrive
menu