#!/bin/bash

# 检查是否安装必要工具
check_dependencies() {
    for cmd in curl jq; do
        if ! command -v $cmd &>/dev/null; then
            sudo apt update && sudo apt install -y $cmd &>/dev/null
        fi
    done
}

# 获取地理位置
get_location() {
    LOCATION=$(curl -s https://ipinfo.io | jq -r '.region + " " + .country' 2>/dev/null)
    if [ -z "$LOCATION" ]; then
        LOCATION=$(curl -s https://ipapi.co/json | jq -r '.region + " " + .country_name' 2>/dev/null)
    fi
    if [ -z "$LOCATION" ]; then
        LOCATION=$(curl -s http://ip-api.com/json/ | jq -r '.regionName + " " + .country' 2>/dev/null)
    fi
    if [ -z "$LOCATION" ]; then
        LOCATION=$(curl -s https://freegeoip.app/json/ | jq -r '.region_name + " " + .country_name' 2>/dev/null)
    fi
    [ -z "$LOCATION" ] && LOCATION="未知"
    echo "$LOCATION"
}

# 获取防火墙状态
get_firewall_status() {
    if command -v ufw &>/dev/null; then
        STATUS=$(ufw status | grep -i "status" | awk '{print $2}')
        echo "${STATUS:-未知}"
    else
        echo "未安装"
    fi
}

# 获取IPv6地址
get_ipv6() {
    IPV6=$(ip -6 addr show | grep inet6 | grep -v '::1' | grep -v 'fe80' | awk '{print $2}' | cut -d'/' -f1 | head -n1)
    if [ -z "$IPV6" ]; then
        IPV6="未分配"
    fi
    echo "$IPV6"
}

# 主程序
main() {
    check_dependencies

    HOSTNAME=$(hostname)
    OS_VERSION=$(lsb_release -d | awk -F'\t' '{print $2}')
    KERNEL_VERSION=$(uname -r)
    ARCH=$(uname -m)
    CPU_MODEL=$(awk -F': ' '/model name/{print $2; exit}' /proc/cpuinfo)
    CPU_CORES=$(grep -c '^processor' /proc/cpuinfo)
    CPU_FREQ=$(awk -F'[ :]' '/cpu MHz/{printf "%.1f GHz", $3/1000; exit}' /proc/cpuinfo)
    LOAD_AVG=$(awk '{print $1", "$2", "$3}' /proc/loadavg)
    MEM_TOTAL=$(free -m | awk '/Mem:/{print $2}')
    MEM_USED=$(free -m | awk '/Mem:/{print $3}')
    SWAP_TOTAL=$(free -m | awk '/Swap:/{print $2}')
    SWAP_USED=$(free -m | awk '/Swap:/{print $3}')
    DISK_USAGE=$(df -h --total | awk '/^total/{print $3"/"$2 " ("$5")"}')
    RX_BYTES=$(ifconfig | grep -oP 'RX bytes:\K\d+' | awk '{sum+=$1} END {printf "%.2f GB\n", sum/1024/1024/1024}')
    TX_BYTES=$(ifconfig | grep -oP 'TX bytes:\K\d+' | awk '{sum+=$1} END {printf "%.2f GB\n", sum/1024/1024/1024}')
    NETWORK_ALGO=$(sysctl net.ipv4.tcp_congestion_control | awk '{print $3}')
    LOCATION=$(get_location)
    FIREWALL_STATUS=$(get_firewall_status)
    ISP=$(curl -s https://ipinfo.io/org | sed 's/AS[0-9]* //')
    IPV4=$(curl -s4 https://ipinfo.io/ip || echo "未分配")
    IPV6=$(get_ipv6)
    DNS=$(cat /etc/resolv.conf | grep 'nameserver' | awk '{print $2}' | xargs)
    TIMEZONE=$(cat /etc/timezone 2>/dev/null || timedatectl | grep "Time zone" | awk '{print $3}')
    SYSTEM_TIME=$(date "+%Y-%m-%d %H:%M:%S")

    clear
    echo -e "系统信息查询\n"
    echo -e "主机名:       $HOSTNAME"
    echo -e "系统版本:     $OS_VERSION"
    echo -e "Linux版本:    $KERNEL_VERSION"
    echo -e "-------------"
    echo -e "CPU架构:      $ARCH"
    echo -e "CPU型号:      $CPU_MODEL"
    echo -e "CPU核心数:    $CPU_CORES"
    echo -e "CPU频率:      $CPU_FREQ"
    echo -e "-------------"
    echo -e "CPU占用:      $(grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5); printf "%.0f%%", usage}')"
    echo -e "系统负载:     $LOAD_AVG"
    echo -e "物理内存:     ${MEM_USED}/${MEM_TOTAL} MB ($(awk "BEGIN {printf \"%.2f\", $MEM_USED/$MEM_TOTAL*100}")%)"
    echo -e "虚拟内存:     ${SWAP_USED}/${SWAP_TOTAL} MB ($(awk "BEGIN {printf \"%.2f\", $SWAP_USED/$SWOTAL*100}")%)"
    echo -e "硬盘占用:     $DISK_USAGE"
    echo -e "-------------"
    echo -e "总接收:       $RX_BYTES"
    echo -e "总发送:       $TX_BYTES"
    echo -e "-------------"
    echo -e "网络算法:     $NETWORK_ALGO"
    echo -e "防火墙状态:   $FIREWALL_STATUS"
    echo -e "-------------"
    echo -e "运营商:       $ISP"
    echo -e "IPv4地址:     $IPV4"
    echo -e "IPv6地址:     $IPV6"
    echo -e "DNS地址:      $DNS"
    echo -e "地理位置:     $LOCATION"
    echo -e "系统时间:     $TIMEZONE $SYSTEM_TIME"
    echo -e "-------------"
    echo -e "操作完成"
    echo -e "按任意键继续..."
    read -n 1
}

main
#!/bin/bash

# 定义颜色
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
LIGHTBLUE='\033[1;34m'
LIGHTCYAN='\033[1;36m'
NC='\033[0m' # No Color

# 检查脚本是否被直接运行
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    echo -e "${RED}This script must be run directly, not sourced.${NC}"
    exit 1
fi

# 检查是否以 root 用户运行
if [ "$(id -u)" != "0" ]; then
    echo -e "${RED}请以 root 用户运行脚本。${NC}"
    exit 1
fi

# 获取当前脚本的绝对路径
SCRIPT_PATH=$(readlink -f "$0" 2>/dev/null || realpath "$0")

# 卸载主脚本
uninstall_script() {
    echo -e "${YELLOW}开始卸载主脚本并清除相关数据...${NC}"
    read -p "确定要卸载主脚本并清除相关数据吗？(y/n): " confirm
    if [ "$confirm" != "y" ]; then
        echo -e "${RED}卸载已取消。${NC}"
        return
    fi

    # 尝试多种方式定位并删除脚本
    SCRIPT_LOCATIONS=(
        "$SCRIPT_PATH"
        "$(which n 2>/dev/null)"
        "/usr/local/bin/n"
        "/usr/bin/n"
        "$(command -v n)"
    )

    REMOVED=0
    for loc in "${SCRIPT_LOCATIONS[@]}"; do
        if [ -f "$loc" ]; then
            sudo rm -f "$loc"
            REMOVED=1
            echo -e "${GREEN}已删除脚本：$loc${NC}"
        fi
    done

    # 清理 alias
    sed -i '/alias n=/d' ~/.bashrc
    sudo sed -i '/alias n=/d' /root/.bashrc
    
    # 重新加载 bashrc
    source ~/.bashrc
    sudo bash -c "source /root/.bashrc"

    if [ $REMOVED -eq 1 ]; then
        echo -e "${GREEN}主脚本已成功卸载。${NC}"
    else
        echo -e "${RED}未找到要卸载的脚本。${NC}"
    fi
    exit 0
}

# 添加 n 快捷指令
setup_n_alias() {
    echo -e "${YELLOW}正在配置快捷指令 'n'...${NC}"
    
    # 复制脚本到系统可执行目录
    sudo cp "$SCRIPT_PATH" /usr/local/bin/n
    sudo chmod +x /usr/local/bin/n

    # 为当前用户添加 alias
    echo "alias n='/usr/local/bin/n'" >> ~/.bashrc
    
    # 为 root 用户添加 alias
    sudo bash -c "echo \"alias n='/usr/local/bin/n'\" >> /root/.bashrc"
    
    # 重新加载 .bashrc 文件
    source ~/.bashrc
    sudo bash -c "source /root/.bashrc"
    
    echo -e "${GREEN}快捷指令 'n' 已配置！现在你可以通过输入 'n' 来启动该脚本。${NC}"
}

# 显示主菜单
show_main_menu() {
    while true; do
        clear  # 清屏，使菜单界面更加清晰
        
        # 在顶部显示超大绿色 "M"
        echo -e "${GREEN}███████╗██╗  ██╗██╗██╗      ${NC}"
        echo -e "${GREEN}╚══██╔══╝██║  ██║██║██║      ${NC}"
        echo -e "${GREEN}   ██║   ███████║██║██║██████╗${NC}"
        echo -e "${GREEN}   ██║   ██╔══██║██║██║╚════╝${NC}"
        echo -e "${GREEN}   ██║   ██║  ██║██║██║██████╗${NC}"
        echo -e "${GREEN}   ╚═╝   ╚═╝  ╚═╝╚═╝╚═════╝${NC}"
        
        # 插入快捷键提示
        echo -e "${YELLOW}使用快捷键 ${LIGHTCYAN}n${NC} 可以快速打开脚本 ${LIGHTBLUE}😊${NC}"
        
        # 添加作者信息
        echo -e "${LIGHTCYAN}作者：emo的小默默${NC}"
        
        echo -e "${BLUE}========================== VPS 脚本菜单 ========================== ${NC}"
        echo -e "${GREEN}请选择要执行的任务：${NC}"
        
        # 调整后的两排菜单选项，确保上下对齐
        echo -e "1. 搭建 Hysteria 节点           5. 卸载主脚本"
        echo -e "2. 安装并配置 UFW 防火墙       6. 一键WARP"
        echo -e "3. 配置密钥登录               7. BBR加速"
        echo -e "4. 修改登录端口号             8. Docker管理"
        echo -e "9. 系统信息查询               0. 退出"
        
        echo -e "${BLUE}============================================================${NC}"
        
        read -p "请输入选项 (0-9): " choice
        case $choice in
            1)
                echo -e "${YELLOW}正在执行：搭建 Hysteria 节点...${NC}"
                bash <(curl -sSL https://gist.githubusercontent.com/momo97620/68630501ec62d5f6ece848d5e3ffad4e/raw/203246731cde7f6ca90d8b2e934cf0ffa5127cb4/hy2)
                ;;
            2)
                echo -e "${YELLOW}正在执行：安装并配置 UFW 防火墙...${NC}"
                bash <(curl -sSL https://gist.githubusercontent.com/momo97620/2ecbf06ce959fda14b01c0ce9f34f3d8/raw/e7d1e2ad49decc464f0a814c436ca4b6151986e7/ufw_install.sh)
                ;;
            3)
                echo -e "${YELLOW}正在执行：配置密钥登录...${NC}"
                bash <(curl -sSL https://gist.githubusercontent.com/momo97620/035985261aa7f946270590a15ca4c9f6/raw/a843704765ad3e600461693379fd6b2fa0cecd66/miyao)
                ;;
            4)
                echo -e "${YELLOW}正在执行：修改登录端口号...${NC}"
                bash <(curl -sSL https://gist.githubusercontent.com/momo97620/685e1ead90ed0ad379c6a75e27409704/raw/aaeabe347f3612e9c308b898e64bcfd12276a067/duank)
                ;;
            5)
                uninstall_script
                ;;
            6)
                echo -e "${YELLOW}正在执行：一键WARP...${NC}"
                wget -N https://gitlab.com/fscarmen/warp/-/raw/main/menu.sh && bash menu.sh
                ;;
            7)
                echo -e "${YELLOW}正在执行：BBR加速...${NC}"
                wget -O tcp.sh "https://github.com/ylx2016/Linux-NetSpeed/raw/master/tcp.sh" && chmod +x tcp.sh && ./tcp.sh
                ;;
            8)
                echo -e "${YELLOW}正在执行：Docker管理...${NC}"
                curl -fsSL "https://raw.githubusercontent.com/momo97620/momoya/refs/heads/main/docker" -o docker_script && chmod +x docker_script && ./docker_script
                ;;
            9)
                echo -e "${YELLOW}正在执行：系统信息查询...${NC}"
                bash <(curl -sSL https://raw.githubusercontent.com/momo97620/momoya/main/xitong)
                ;;
            0)
                echo -e "${GREEN}退出程序...${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}无效的选择，请重新输入！${NC}"
                ;;
        esac
        
        # 暂停一下，允许查看执行结果
        read -n 1 -s -r -p "按任意键继续..."
    done
}

# 自动配置 n 快捷指令
setup_n_alias

# 脚本入口
show_main_menu