#!/bin/bash

# 定义颜色
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
LIGHTBLUE='\033[1;34m'
LIGHTCYAN='\033[1;36m'
BRIGHT_MAGENTA='\033[1;35m'  # 亮紫色
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# 定义符号链接的目标和链接名称
LINK_NAME="/usr/local/bin/m"
SCRIPT_PATH="/root/vps666"

# 检查符号链接是否已经存在
if [ ! -L "$LINK_NAME" ]; then
    ln -s "$SCRIPT_PATH" "$LINK_NAME"
    echo -e "${GREEN}符号链接 $LINK_NAME 已创建。${NC}"
else
    echo -e "${YELLOW}符号链接 $LINK_NAME 已存在。${NC}"
fi

# 获取脚本路径
SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]}")
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")

# 定义固定安装路径
INSTALL_DIR="/usr/local/my_script"

# 检查脚本是否被直接运行
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    echo -e "${RED}此脚本必须直接运行，而不是被引用。${NC}"
    exit 1
fi

# 检查是否以 root 用户运行
if [ "$(id -u)" != "0" ]; then
    echo -e "${RED}请以 root 用户运行脚本。${NC}"
    exit 1
fi

# 安装主脚本
install_script() {
    echo -e "${YELLOW}正在安装：将脚本安装到 $INSTALL_DIR...${NC}"
    
    if [ ! -d "$INSTALL_DIR" ]; then
        mkdir -p "$INSTALL_DIR"
    fi
    
    cp "$SCRIPT_PATH" "$INSTALL_DIR"
    chmod +x "$INSTALL_DIR/$(basename "$SCRIPT_PATH")"
    
    echo -e "${GREEN}脚本已安装到 $INSTALL_DIR。${NC}"
}

# 修改登录端口的函数
change_ssh_port() {
    local current_port
    local new_port
    local user

    user=$(whoami)
    current_port=$(grep -E "^Port " /etc/ssh/sshd_config | awk '{print $2}' || echo "22")

    echo -e "${YELLOW}当前 SSH 登录端口是: $current_port${NC}"
    read -p "请输入新的 SSH 登录端口号 (推荐 > 1024): " new_port

    # 检查输入的端口号是否有效
    if ! [[ "$new_port" =~ ^[0-9]+$ ]] || [ "$new_port" -le 1024 ] || [ "$new_port" -ge 65535 ]; then
        echo -e "${RED}无效的端口号，请输入一个有效的端口号（大于 1024 且小于 65535）。${NC}"
        return
    fi

    # 修改 sshd_config 文件
    sed -i "s/^Port .*/Port $new_port/" /etc/ssh/sshd_config

    # 赋予权限
    chmod 600 /etc/ssh/sshd_config
    echo -e "${GREEN}SSH 登录端口已修改为 $new_port。${NC}"

    # 禁用原来的 22 端口
    if [ "$current_port" != "22" ]; then
        ufw deny 22
        echo -e "${GREEN}已禁用 22 端口。${NC}"
    fi

    # 识别并允许新端口
    if command -v ufw &> /dev/null; then
        ufw allow "$new_port"
        echo -e "${GREEN}已放行新端口 $new_port。${NC}"
    fi

    # 重启 SSH 服务
    systemctl restart sshd
    echo -e "${GREEN}SSH 服务已重启，新的端口设置生效。${NC}"

    # 提示用户按任意键返回主菜单
    read -p "按任意键返回主菜单..."
}

show_main_menu() {
    while true; do
        clear
        echo -e "${LIGHTCYAN}"
        echo "  ______ _   __  __   __  __          "
        echo " |  ____| | |  \/  | |  \/  |         "
        echo " | |__  | | | \  / | | \  / | ___ _ __ "
        echo " |  __| | | |\/| | | |\/| |/ _ \ '__|"
        echo " | |    | | | |  | | | |  | |  __/ |   "
        echo " |_|    |_| |_|  |_| |_|  |_|\___|_|   "
        echo -e "${NC}"

        echo -e "${LIGHTCYAN}============================= VPS 脚本菜单 =============================${NC}"
        echo -e "${LIGHTBLUE}使用快捷指令 m 可快速打开脚本😊${NC}"
        echo -e "${LIGHTBLUE}作者：emo的小默默${NC}"
        echo -e "${LIGHTCYAN}=====================================================================${NC}"
        
        echo -e "${YELLOW}请选择要执行的任务：${NC}"

        # 使用 printf 格式化菜单选项，确保对齐
        printf "${GREEN}%-3s %-30s${NC}\n" "1." "搭建hy2节点"
        printf "${GREEN}%-3s %-30s${NC}\n" "2." "UFW 防火墙"
        printf "${GREEN}%-3s %-30s${NC}\n" "3." "配置密钥登录"
        printf "${GREEN}%-3s %-30s${NC}\n" "4." "修改登录端口"
        printf "${GREEN}%-3s %-30s${NC}\n" "5." "一键搭建节点"
        printf "${GREEN}%-3s %-30s${NC}\n" "6." "一键WARP"
        printf "${GREEN}%-3s %-30s${NC}\n" "7." "BBR加速"
        printf "${GREEN}%-3s %-30s${NC}\n" "8." "Docker管理"
        printf "${GREEN}%-3s %-30s${NC}\n" "9." "系统信息查询"
        printf "${GREEN}%-3s %-30s${NC}\n" "10." "设IPv4/6优先级"
        printf "${GREEN}%-3s %-30s${NC}\n" "11." "更新脚本"
        printf "${GREEN}%-3s %-30s${NC}\n" "12." "保持ssh链接"
        printf "${GREEN}%-3s %-30s${NC}\n" "13." "DD系统"
        printf "${GREEN}%-3s %-30s${NC}\n" "0." "退出"
        
        echo -e "${LIGHTCYAN}=====================================================================${NC}"
        read -p "请输入选项 (0-13): " choice
        case $choice in
            1)
                execute_script "https://gist.githubusercontent.com/momo97620/68630501ec62d5f6ece848d5e3ffad4e/raw/203246731cde7f6ca90d8b2e934cf0ffa5127cb4/hy2" "搭建 Hysteria 节点完成。"
                ;;
            2)
                execute_script "https://gist.githubusercontent.com/momo97620/2ecbf06ce959fda14b01c0ce9f34f3d8/raw/ebbbdf08a05c890d72902863c53bf80af9531601/ufw_install.sh" "安装并配置 UFW 防火墙完成。"
                ;;
            3)
                # 自动获取当前用户名并配置密钥登录
                current_user=$(whoami)
                echo "当前用户名是: $current_user"
                configure_key_login "$current_user"
                ;;
            4)
                change_ssh_port
                ;;
            5)
                execute_script "https://github.com/233boy/sing-box/raw/main/install.sh" "一键搭建节点完成。"
                ;;
            6)
                execute_script "https://gitlab.com/fscarmen/warp/-/raw/main/menu.sh" "一键WARP完成。"
                ;;
            7)
                execute_script "https://github.com/ylx2016/Linux-NetSpeed/raw/master/tcp.sh" "BBR加速完成。"
                ;;
            8)
                execute_script "https://raw.githubusercontent.com/momo97620/momoya/refs/heads/main/docker" "Docker管理完成。"
                ;;
            9)
                execute_script "https://raw.githubusercontent.com/momo97620/momoya/main/xitong" "系统信息查询完成。"
                ;;
            10)
                set_ip_priority
                ;;
            11)
                update_script
                ;;
            12) 
                set_ssh_keepalive
                ;;
            13) 
                download_reinstall_script
                run_reinstall_script
                ;;  
            0)
                echo -e "${GREEN}退出程序...${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}无效的选择，请重新输入！${NC}"
                read -p "按回车键返回主菜单..."
                ;;
        esac
    done
}

# 主执行逻辑
main() {
    if [[ "$1" == "install" ]]; then
        install_script
        exit 0
    fi

    echo -e "${YELLOW}脚本路径: $SCRIPT_PATH${NC}"
    echo -e "${YELLOW}安装路径: $INSTALL_DIR${NC}"

    if [ ! -d "$INSTALL_DIR" ]; then
        install_script
    else
        echo -e "${GREEN}脚本已安装到：$INSTALL_DIR${NC}"
    fi

    show_main_menu
}

# 执行主逻辑
main "$@"
