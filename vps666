#!/bin/bash

# 获取脚本路径
SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]}")
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")

# 定义固定安装路径（例如：/usr/local/my_script）
INSTALL_DIR="/usr/local/my_script"

# 定义颜色
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
LIGHTBLUE='\033[1;34m'
LIGHTCYAN='\033[1;36m'
NC='\033[0m' # No Color

# 检查脚本是否被直接运行
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    echo -e "${RED}This script must be run directly, not sourced.${NC}"
    exit 1
fi

# 检查是否以 root 用户运行
if [ "$(id -u)" != "0" ]; then
    echo -e "${RED}请以 root 用户运行脚本。${NC}"
    exit 1
fi

# 修复主机名解析问题
fix_hostname_issue() {
    echo -e "${YELLOW}正在修复主机名解析问题...${NC}"
    
    # 获取当前的主机名
    HOSTNAME=$(cat /etc/hostname)
    
    # 如果主机名为空，设置默认的主机名
    if [ -z "$HOSTNAME" ]; then
        echo -e "${RED}主机名为空，正在设置为默认主机名...${NC}"
        echo "momo" > /etc/hostname
        HOSTNAME="momo"
    fi
    
    # 编辑 /etc/hosts 配置，确保主机名能够解析
    if ! grep -q "$HOSTNAME" /etc/hosts; then
        echo -e "${YELLOW}正在修改 /etc/hosts 配置文件...${NC}"
        sed -i "s/127.0.0.1\s*localhost/127.0.0.1 localhost $HOSTNAME/" /etc/hosts
    fi
    
    echo -e "${GREEN}主机名解析修复完成。${NC}"
}

# 显示主菜单
show_main_menu() {
    while true; do
        clear  # 清屏，使菜单界面更加清晰
        
        # 在顶部显示超大绿色 "M"
        echo -e "${GREEN}███████╗██╗  ██╗██╗██╗      ${NC}"
        echo -e "${GREEN}╚══██╔══╝██║  ██║██║██║      ${NC}"
        echo -e "${GREEN}   ██║   ███████║██║██║██████╗${NC}"
        echo -e "${GREEN}   ██║   ██╔══██║██║██║╚════╝${NC}"
        echo -e "${GREEN}   ██║   ██║  ██║██║██║██████╗${NC}"
        echo -e "${GREEN}   ╚═╝   ╚═╝  ╚═╝╚═╝╚═════╝${NC}"
        
        # 插入快捷键提示
        echo -e "${YELLOW}使用快捷键 ${LIGHTCYAN}n${NC} 可以快速打开脚本 ${LIGHTBLUE}😊${NC}"
        
        # 添加作者信息
        echo -e "${LIGHTCYAN}作者：emo的小默默${NC}"
        
        echo -e "${BLUE}========================== VPS 脚本菜单 ========================== ${NC}"
        echo -e "${GREEN}请选择要执行的任务：${NC}"
        
        # 调整后的两排菜单选项，确保上下对齐
        echo -e "1. 搭建 Hysteria 节点           6. 一键WARP"
        echo -e "2. 安装并配置 UFW 防火墙       7. BBR加速"
        echo -e "3. 配置密钥登录               8. Docker管理"
        echo -e "4. 修改登录端口号             9. 系统信息查询"
        echo -e "0. 退出"
        
        echo -e "${BLUE}============================================================${NC}"
        
        read -p "请输入选项 (0-9): " choice
        case $choice in
            1)
                echo -e "${YELLOW}正在执行：搭建 Hysteria 节点...${NC}"
                bash <(curl -sSL https://gist.githubusercontent.com/momo97620/68630501ec62d5f6ece848d5e3ffad4e/raw/203246731cde7f6ca90d8b2e934cf0ffa5127cb4/hy2)
                ;;
            2)
                echo -e "${YELLOW}正在执行：安装并配置 UFW 防火墙...${NC}"
                bash <(curl -sSL https://gist.githubusercontent.com/momo97620/2ecbf06ce959fda14b01c0ce9f34f3d8/raw/e7d1e2ad49decc464f0a814c436ca4b6151986e7/ufw_install.sh)
                ;;
            3)
                echo -e "${YELLOW}正在执行：配置密钥登录...${NC}"
                bash <(curl -sSL https://gist.githubusercontent.com/momo97620/035985261aa7f946270590a15ca4c9f6/raw/a843704765ad3e600461693379fd6b2fa0cecd66/miyao)
                
                # 等待用户按下回车键再返回主菜单
                read -p "密钥配置完成，请按回车键返回主菜单..."
                ;;
            4)
                echo -e "${YELLOW}正在执行：修改登录端口号...${NC}"
                bash <(curl -sSL https://gist.githubusercontent.com/momo97620/685e1ead90ed0ad379c6a75e27409704/raw/aaeabe347f3612e9c308b898e64bcfd12276a067/duank)
                ;;
            6)
                echo -e "${YELLOW}正在执行：一键WARP...${NC}"
                wget -N https://gitlab.com/fscarmen/warp/-/raw/main/menu.sh && bash menu.sh
                ;;
            7)
                echo -e "${YELLOW}正在执行：BBR加速...${NC}"
                wget -O tcp.sh "https://github.com/ylx2016/Linux-NetSpeed/raw/master/tcp.sh" && chmod +x tcp.sh && ./tcp.sh
                ;;
            8)
                echo -e "${YELLOW}正在执行：Docker管理...${NC}"
                curl -fsSL "https://raw.githubusercontent.com/momo97620/momoya/refs/heads/main/docker" -o docker_script && chmod +x docker_script && ./docker_script
                ;;
            9)
                echo -e "${YELLOW}正在执行：系统信息查询...${NC}"
                bash <(curl -sSL https://raw.githubusercontent.com/momo97620/momoya/main/xitong)
                ;;
            0)
                echo -e "${GREEN}退出程序...${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}无效的选择，请重新输入！${NC}"
                ;;
        esac
    done
}

# 卸载主脚本
uninstall_script() {
    echo -e "${YELLOW}开始卸载主脚本并清除相关数据...${NC}"
    read -p "确定要卸载主脚本并清除相关数据吗？(y/n): " confirm
    if [ "$confirm" != "y" ]; then
        echo -e "${RED}卸载已取消。${NC}"
        return  # 返回主菜单
    fi

    # 使用固定路径卸载
    echo -e "${YELLOW}正在卸载：卸载主脚本及所有相关文件...${NC}"
    sudo rm -rf "$INSTALL_DIR"
    echo -e "${GREEN}主脚本及相关文件已卸载。${NC}"
    exit 0
}

# 安装主脚本
install_script() {
    echo -e "${YELLOW}正在安装：将脚本安装到 $INSTALL_DIR...${NC}"
    
    # 创建安装目录
    sudo mkdir -p "$INSTALL_DIR"
    
    # 将脚本复制到安装目录
    sudo cp "$SCRIPT_PATH" "$INSTALL_DIR"
    
    # 设置执行权限
    sudo chmod +x "$INSTALL_DIR/$(basename "$SCRIPT_PATH")"
    
    echo -e "${GREEN}脚本已安装到 $INSTALL_DIR。${NC}"
}

# 调试输出脚本路径
echo -e "${YELLOW}脚本路径: $SCRIPT_PATH${NC}"
echo -e "${YELLOW}安装路径: $INSTALL_DIR${NC}"

# 脚本入口
if [ ! -d "$INSTALL_DIR" ]; then
    install_script  # 如果脚本未安装，自动安装
else
    echo -e "${GREEN}脚本已安装到：$INSTALL_DIR${NC}"
fi

# 修复主机名解析问题
fix_hostname_issue

# 下载并执行主脚本
echo -e "${YELLOW}正在通过 curl 执行脚本...${NC}"
bash <(curl -sSL https://raw.githubusercontent.com/momo97620/momoya/refs/heads/main/vps666)

show_main_menu