#!/bin/bash

# 定义颜色
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
LIGHTBLUE='\033[1;34m'
LIGHTCYAN='\033[1;36m'
BRIGHT_MAGENTA='\033[1;35m'  # 亮紫色
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# 定义符号链接的目标和链接名称
LINK_NAME="/usr/local/bin/m"
SCRIPT_PATH="/root/vps666"

# 检查符号链接是否已经存在
if [ ! -L "$LINK_NAME" ]; then
    ln -s "$SCRIPT_PATH" "$LINK_NAME"
    echo -e "${GREEN}符号链接 $LINK_NAME 已创建。${NC}"
else
    echo -e "${YELLOW}符号链接 $LINK_NAME 已存在。${NC}"
fi

# 获取脚本路径
SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]}")
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")

# 定义固定安装路径
INSTALL_DIR="/usr/local/my_script"

# 检查脚本是否被直接运行
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    echo -e "${RED}此脚本必须直接运行，而不是被引用。${NC}"
    exit 1
fi

# 检查是否以 root 用户运行
if [ "$(id -u)" != "0" ]; then
    echo -e "${RED}请以 root 用户运行脚本。${NC}"
    exit 1
fi

# 安装主脚本
install_script() {
    echo -e "${YELLOW}正在安装：将脚本安装到 $INSTALL_DIR...${NC}"
    
    if [ ! -d "$INSTALL_DIR" ];; then
        mkdir -p "$INSTALL_DIR"
    fi
    
    cp "$SCRIPT_PATH" "$INSTALL_DIR"
    chmod +x "$INSTALL_DIR/$(basename "$SCRIPT_PATH")"
    
    echo -e "${GREEN}脚本已安装到 $INSTALL_DIR。${NC}"
}

# 执行子脚本
execute_script() {
    local script_url="$1"
    local success_message="$2"
    
    bash <(curl -sSL "$script_url")
    echo -e "${GREEN}$success_message${NC}"
    
    read -p "按任意键返回主菜单..."
}

# 设置 IPv4/6 优先级
set_ip_priority() {
    # 检查当前优先级
    check_current_priority() {
        if grep -q "net.ipv6.conf.all.disable_ipv6 = 1" /etc/sysctl.conf; then
            echo "当前优先级：IPv4"
        else
            echo "当前优先级：IPv6"
        fi
    }

    # 设置优先级
    set_priority() {
        case "$1" in
            1)
                echo "正在设置优先使用 IPv4..."
                # 禁用 IPv6
                echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf
                echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.conf
                # 应用更改
                sysctl -p
                echo "IPv4 优先设置完成！"
                ;;
            2)
                echo "正在设置优先使用 IPv6..."
                # 启用 IPv6
                sed -i '/net.ipv6.conf.all.disable_ipv6/d' /etc/sysctl.conf
                sed -i '/net.ipv6.conf.default.disable_ipv6/d' /etc/sysctl.conf
                echo "net.ipv6.conf.all.disable_ipv6 = 0" >> /etc/sysctl.conf
                echo "net.ipv6.conf.default.disable_ipv6 = 0" >> /etc/sysctl.conf
                # 应用更改
                sysctl -p
                echo "IPv6 优先设置完成！"
                ;;
            *)
                echo "无效的选项！请输入 '1' 或 '2'。"
                exit 1
                ;;
        esac
    }

    # 主菜单
    show_menu() {
        clear
        echo "==============================="
        echo " 设置 IPv4 或 IPv6 优先级"
        echo "==============================="
        check_current_priority
        echo "1. 优先使用 IPv4"
        echo "2. 优先使用 IPv6"
        echo "==============================="
        read -p "请输入选项 [1/2]：" choice

        # 根据用户选择设置优先级
        set_priority "$choice"

        # 提示用户按任意键退出
        echo "设置完成！按任意键退出..."
        read -n 1 -s -r
    }

    # 运行主菜单
    show_menu
}

# 更新脚本
update_script() {
    local remote_url="https://raw.githubusercontent.com/momo97620/momoya/refs/heads/main/vps666"  # 替换为实际的远程脚本 URL
    local local_path="/root/vps666"

    echo -e "${YELLOW}正在更新脚本到最新版本...${NC}"

    # 下载最新脚本
    if curl -sSL "$remote_url" -o "$local_path"; then
        chmod +x "$local_path"
        echo -e "${GREEN}脚本更新成功！最新版本已保存到 $local_path。${NC}"
    else
        echo -e "${RED}脚本更新失败，请检查远程 URL 是否正确。${NC}"
    fi

    read -p "按任意键返回主菜单..."
}

# 封装函数：设置 SSH KeepAlive 配置
set_ssh_keepalive() {
    local config_file="/etc/ssh/sshd_config"
    local interval=60    # 默认 ClientAliveInterval 值
    local count=10       # 默认 ClientAliveCountMax 值

    echo "正在配置 SSH 客户端保持连接参数..."

    # 检查配置文件是否存在
    if [[ ! -f "$config_file" ]]; then
        echo "错误：SSH 配置文件 $config_file 不存在。" >&2
        exit 1
    fi

    # 提示用户确认修改
    read -p "是否确认修改 SSH 配置？(y/n): " confirm
    if [[ "$confirm" != "y" ]]; then
        echo "取消修改。"
        exit 0
    fi

    # 允许用户自定义参数
    read -p "请输入 ClientAliveInterval 值（默认 60）: " user_interval
    if [[ -n "$user_interval" ]]; then
        interval=$user_interval
    fi

    read -p "请输入 ClientAliveCountMax 值（默认 10）: " user_count
    if [[ -n "$user_count" ]]; then
        count=$user_count
    fi

    # 修改或添加 ClientAliveInterval
    if grep -q '^#\?ClientAliveInterval' "$config_file"; then
        sed -ri "s/^#?.*ClientAliveInterval.*/ClientAliveInterval $interval/" "$config_file"
    else
        echo "ClientAliveInterval $interval" >> "$config_file"
    fi

    # 修改或添加 ClientAliveCountMax
    if grep -q '^#\?ClientAliveCountMax' "$config_file"; then
        sed -ri "s/^#?.*ClientAliveCountMax.*/ClientAliveCountMax $count/" "$config_file"
    else
        echo "ClientAliveCountMax $count" >> "$config_file"
    fi

    # 重启 sshd 服务
    echo "重启 SSH 服务以应用更改..."
    sudo systemctl restart sshd
    if [[ $? -eq 0 ]]; then
        echo "SSH 配置已更新并成功应用！"
    else
        echo "SSH 服务重启失败，请检查配置。" >&2
        exit 1
    fi
   #提示用户按任意键返回
    echo "按任意键返回主菜单..."
    read -n 1 -s -r  # 等待用户按任意键
}

# 下载并运行脚本函数
download_and_run_script() {
    local url=$1
    local script_name="reinstall.sh"
    curl -sSL $url -o $script_name || wget -q -O $script_name $url
    
    if [ -f $script_name ]; then
        chmod +x $script_name
        ./$script_name
    else
        echo -e "${RED}脚本下载失败。${NC}"
    fi
}

# 显示主菜单
show_main_menu() {
    while true; do
        clear
        # ASCII 艺术展示 "emoMomo"
        echo -e "${LIGHTCYAN}"
        echo "  ______ _   __  __   __  __          "
        echo " |  ____| | |  \/  | |  \/  |         "
        echo " | |__  | | | \  / | | \  / | ___ _ __ "
        echo " |  __| | | |\/| | | |\/| |/ _ \ '__|"
        echo " | |    | | | |  | | | |  | |  __/ |   "
        echo " |_|    |_| |_|  |_| |_|  |_|\___|_|   "
        echo -e "${NC}"

        echo -e "${LIGHTCYAN}============================= VPS 脚本菜单 =============================${NC}"
        echo -e "${LIGHTBLUE}使用快捷指令 m 可快速打开脚本😊${NC}"
        echo -e "${LIGHTBLUE}作者：emo的小默默${NC}"
        echo -e "${LIGHTCYAN}=====================================================================${NC}"
        
        echo -e "${YELLOW}请选择要执行的任务：${NC}"

        # 使用 printf 格式化菜单选项，确保对齐
        printf "${GREEN}%-3s %-30s${NC}\n" "1." "搭建hy2节点"
        printf "${GREEN}%-3s %-30s${NC}\n" "2." "UFW 防火墙"
        printf "${GREEN}%-3s %-30s${NC}\n" "3." "配置密钥登录"
        printf "${GREEN}%-3s %-30s${NC}\n" "4." "修改登录端口"
        printf "${GREEN}%-3s %-30s${NC}\n" "5." "一键搭建节点"
        printf "${GREEN}%-3s %-30s${NC}\n" "6." "一键WARP"
        printf "${GREEN}%-3s %-30s${NC}\n" "7." "BBR加速"
        printf "${GREEN}%-3s %-30s${NC}\n" "8." "Docker管理"
        printf "${GREEN}%-3s %-30s${NC}\n" "9." "系统信息查询"
        printf "${GREEN}%-3s %-30s${NC}\n" "10." "设IPv4/6优先级"
        printf "${GREEN}%-3s %-30s${NC}\n" "11." "更新脚本"
        printf "${GREEN}%-3s %-30s${NC}\n" "12." "保持ssh链接"
        printf "${GREEN}%-3s %-30s${NC}\n" "13." "DD系统"
        printf "${GREEN}%-3s %-30s${NC}\n" "0." "退出"

        # 退出选项
        echo -e "${LIGHTCYAN}=====================================================================${NC}"
        read -p "请输入选项 (0-13): " choice
        case $choice in
            1)
                execute_script "https://gist.githubusercontent.com/momo97620/68630501ec62d5f6ece848d5e3ffad4e/raw/203246731cde7f6ca90d8b2e934cf0ffa5127cb4/hy2" "搭建 Hysteria 节点完成。"
                ;;
            2)
                execute_script "https://gist.githubusercontent.com/momo97620/2ecbf06ce959fda14b01c0ce9f34f3d8/raw/ebbbdf08a05c890d72902863c53bf80af9531601/ufw_install.sh" "安装并配置 UFW 防火墙完成。"
                ;;
            3)
                execute_script "https://gist.githubusercontent.com/momo97620/035985261aa7f946270590a15ca4c9f6/raw/0a81d05bcbfdf1b3f8c94ba7203044c55f2e030e/miyao" "配置密钥登录完成。"
                ;;
            4)
                execute_script "https://gist.githubusercontent.com/momo97620/685e1ead90ed0ad379c6a75e27409704/raw/aaeabe347f3612e9c308b898e64bcfd12276a067/duank" "修改登录端口号完成。"
                ;;
            5)
                execute_script "https://github.com/233boy/sing-box/raw/main/install.sh" "一键搭建节点完成。"
                ;;
            6)
                execute_script "https://gitlab.com/fscarmen/warp/-/raw/main/menu.sh" "一键WARP完成。"
                ;;
            7)
                execute_script "https://github.com/ylx2016/Linux-NetSpeed/raw/master/tcp.sh" "BBR加速完成。"
                ;;
            8)
                execute_script "https://raw.githubusercontent.com/momo97620/momoya/refs/heads/main/docker" "Docker管理完成。"
                ;;
            9)
                execute_script "https://raw.githubusercontent.com/momo97620/momoya/main/xitong" "系统信息查询完成。"
                ;;
            10)
                set_ip_priority
                ;;
            11)
                update_script
                ;;
            12) 
                set_ssh_keepalive
                ;;    
            13)
                # 嵌入子脚本
                while true; do
                    echo "请选择服务器:"
                    echo "1) 国外服务器"
                    echo "2) 国内服务器"
                    echo "0) 退出"
                    read -p "输入选项 (0, 1 或 2): " sub_choice

                    case $sub_choice in
                        1)
                            echo "选择了国外服务器"
                            download_and_run_script "https://raw.githubusercontent.com/bin456789/reinstall/main/reinstall.sh"
                            ;;
                        2)
                            echo "选择了国内服务器"
                            download_and_run_script "https://www.ghproxy.cc/https://raw.githubusercontent.com/bin456789/reinstall/main/reinstall.sh"
                            ;;
                        0)
                            echo "退出子菜单"
                            break
                            ;;
                        *)
                            echo "无效选项，请输入 0, 1 或 2"
                            ;;
                    esac
                done
                read -p "按任意键返回主菜单..."
                ;;     
            0)
                echo -e "${GREEN}退出程序...${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}无效的选择，请重新输入！${NC}"
                read -p "按回车键返回主菜单..."
                ;;
        esac
    done
}

# 主执行逻辑
main() {
    if [[ "$1" == "install" ]]; then
        install_script
        exit 0
    fi

    echo -e "${YELLOW}脚本路径: $SCRIPT_PATH${NC}"
    echo -e "${YELLOW}安装路径: $INSTALL_DIR${NC}"

    if [ ! -d "$INSTALL_DIR" ]; then
        install_script
    else
        echo -e "${GREEN}脚本已安装到：$INSTALL_DIR${NC}"
    fi

    show_main_menu
}

# 执行主逻辑
main "$@"