#!/bin/bash

# 定义颜色
RED='\033[0;31m'          # 红色
GREEN='\033[0;32m'        # 绿色
BRIGHT_GREEN='\033[1;32m' # 亮绿色
YELLOW='\033[0;94m'       # 黄色
BLUE='\033[0;34m'         # 蓝色
DARK_RED='\033[1;31m'     # 深红色
LIGHTBLUE='\033[1;34m'    # 亮蓝色
LIGHTCYAN='\033[1;36m'    # 亮青色
PINK='\033[38;5;198m'     # 深粉色
DEEPRED='\033[0;91m'      # 深红色
NC='\033[0m'              # 无颜色
        
# 定义符号链接的目标和链接名称
LINK_NAME="/usr/local/bin/m"
SCRIPT_PATH="/root/vps666"

# 检查符号链接是否已经存在
if [ ! -L "$LINK_NAME" ]; then
    ln -s "$SCRIPT_PATH" "$LINK_NAME" > /dev/null 2>&1
else
    # 什么都不做，完全隐藏输出
    :
fi

# 获取脚本路径
SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]}")
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")

# 定义固定安装路径
INSTALL_DIR="/root/vps666"

# 检查脚本是否被直接运行
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    exit 1
fi

# 检查是否以 root 用户运行
if [ "$(id -u)" != "0" ]; then
    exit 1
fi

# 安装主脚本
install_script() {
    # 隐藏所有输出，创建安装目录并安装脚本
    if [ ! -d "$INSTALL_DIR" ]; then
        mkdir -p "$INSTALL_DIR" > /dev/null 2>&1
    fi
    
    cp "$SCRIPT_PATH" "$INSTALL_DIR" > /dev/null 2>&1
    chmod +x "$INSTALL_DIR/$(basename "$SCRIPT_PATH")" > /dev/null 2>&1
}

# 在后台运行安装
install_script &> /dev/null &

# 执行子脚本
execute_script() {
    local script_url="$1"
    local success_message="$2"
    
    bash <(curl -sSL "$script_url")
    echo -e "${GREEN}$success_message${NC}"
    
    read -p "按任意键返回主菜单..."
}

# 设置 IPv4/6 优先级
set_ip_priority() {
    check_current_priority() {
        if grep -q "net.ipv6.conf.all.disable_ipv6 = 1" /etc/sysctl.conf; then
            echo "当前优先级：IPv4"
        else
            echo "当前优先级：IPv6"
        fi
    }

    set_priority() {
        case "$1" in
            1)
                echo "正在设置优先使用 IPv4..."
                echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf
                echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.conf
                sysctl -p
                echo "IPv4 优先设置完成！"
                ;;
            2)
                echo "正在设置优先使用 IPv6..."
                sed -i '/net.ipv6.conf.all.disable_ipv6/d' /etc/sysctl.conf
                sed -i '/net.ipv6.conf.default.disable_ipv6/d' /etc/sysctl.conf
                echo "net.ipv6.conf.all.disable_ipv6 = 0" >> /etc/sysctl.conf
                echo "net.ipv6.conf.default.disable_ipv6 = 0" >> /etc/sysctl.conf
                sysctl -p
                echo "IPv6 优先设置完成！"
                ;;
             
            *)
                echo "无效的选项！请输入 '1' 或 '2'。"
                exit 1
                ;;
        esac
    }

    show_menu() {
        clear
        echo "==============================="
        echo " 设置 IPv4 或 IPv6 优先级"
        echo "==============================="
        check_current_priority
        echo "1. 优先使用 IPv4"
        echo "2. 优先使用 IPv6"
        echo "==============================="
        read -p "请输入选项 [1/2，0]：" choice
        set_priority "$choice"
        echo "设置完成！按任意键退出..."
        read -n 1 -s -r
    }

    show_menu
}

# 更新脚本
update_script() {
    local remote_url="https://raw.githubusercontent.com/momo97620/momoya/refs/heads/main/vps666"
    local local_path="/root/vps666"

    echo -e "${YELLOW}正在更新脚本到最新版本...${NC}"

    if curl -sSL "$remote_url" -o "$local_path"; then
        chmod +x "$local_path"
        echo -e "${GREEN}脚本更新成功！最新版本已保存到 $local_path。${NC}"
    else
        echo -e "${RED}脚本更新失败，请检查远程 URL 是否正确。${NC}"
    fi

    read -p "按任意键返回主菜单..."
}

set_ssh_keepalive() {
    local config_file="/etc/ssh/sshd_config"
    local interval=60
    local count=10

    echo "正在配置 SSH 客户端保持连接参数..."
    if [[ ! -f "$config_file" ]]; then
        echo "错误：SSH 配置文件 $config_file 不存在。" >&2
        exit 1
    fi

    read -p "是否确认修改 SSH 配置？(y/n): " confirm
    if [[ "$confirm" != "y" ]]; then
        echo "取消修改。"
        exit 0
    fi

    read -p "请输入 ClientAliveInterval 值（默认 60）: " user_interval
    if [[ -n "$user_interval" ]]; then
        interval=$user_interval
    fi

    read -p "请输入 ClientAliveCountMax 值（默认 10）: " user_count
    if [[ -n "$user_count" ]]; then
        count=$user_count
    fi

    if grep -q '^#\?ClientAliveInterval' "$config_file"; then
        sed -ri "s/^#?.*ClientAliveInterval.*/ClientAliveInterval $interval/" "$config_file"
    else
        echo "ClientAliveInterval $interval" >> "$config_file"
    fi

    if grep -q '^#\?ClientAliveCountMax' "$config_file"; then
        sed -ri "s/^#?.*ClientAliveCountMax.*/ClientAliveCountMax $count/" "$config_file"
    else
        echo "ClientAliveCountMax $count" >> "$config_file"
    fi

    echo "重启 SSH 服务以应用更改..."
    sudo systemctl restart sshd
    if [[ $? -eq 0 ]]; then
        echo "SSH 配置已更新并成功应用！"
    else
        echo "SSH 服务重启失败，请检查配置。" >&2
        exit 1
    fi
    echo "按任意键返回主菜单..."
    read -n 1 -s -r
}

# 定义命名空间
declare -A RAINBOW_PROMPT

# 颜色代码命名空间
RAINBOW_PROMPT[RED]='\033[0;31m'
RAINBOW_PROMPT[GREEN]='\033[0;32m'
RAINBOW_PROMPT[YELLOW]='\033[0;33m'
RAINBOW_PROMPT[BLUE]='\033[0;34m'
RAINBOW_PROMPT[PURPLE]='\033[0;35m'
RAINBOW_PROMPT[CYAN]='\033[0;36m'
RAINBOW_PROMPT[WHITE]='\033[0;37m'
RAINBOW_PROMPT[RESET]='\033[0m'

# 配置命名空间
RAINBOW_PROMPT[BACKUP_FILE]="$HOME/.bashrc.backup"
RAINBOW_PROMPT[BASHRC_FILE]="$HOME/.bashrc"

# 工具函数命名空间
RAINBOW_PROMPT::print_message() {
    local color=$1
    local message=$2
    echo -e "${RAINBOW_PROMPT[$color]}$message${RAINBOW_PROMPT[RESET]}"
}

RAINBOW_PROMPT::show_menu() {
    clear
    echo "================================"
    echo "       VPS主机名颜色设置        "
    echo "================================"
    echo "1. 设置彩虹色主机名"
    echo "2. 恢复默认设置"
    echo "0. 返回菜单"
    echo "================================"
}

RAINBOW_PROMPT::create_backup() {
    if [ ! -f "${RAINBOW_PROMPT[BACKUP_FILE]}" ]; then
        cp "${RAINBOW_PROMPT[BASHRC_FILE]}" "${RAINBOW_PROMPT[BACKUP_FILE]}"
    fi
}

RAINBOW_PROMPT::press_any_key() {
    RAINBOW_PROMPT::print_message "YELLOW" "\n按任意键返回主菜单..."
    read -n 1 -s -r
}

# 核心功能命名空间
RAINBOW_PROMPT::create_rainbow_prompt() {
    RAINBOW_PROMPT::create_backup
    
    # 修改 .bashrc 文件
    sed -i '/^PS1=/d' "${RAINBOW_PROMPT[BASHRC_FILE]}"
    
    # 构建彩虹PS1
    local rainbow_ps1="PS1=\""
    rainbow_ps1+="\\[${RAINBOW_PROMPT[RED]}\\]r"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[GREEN]}\\]o"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[YELLOW]}\\]o"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[BLUE]}\\]t"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[PURPLE]}\\]@"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[CYAN]}\\]h"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[RED]}\\]k"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[GREEN]}\\]g"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[YELLOW]}\\]1"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[BLUE]}\\]1"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[PURPLE]}\\]-"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[CYAN]}\\]2"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[RED]}\\]0"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[GREEN]}\\]2"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[YELLOW]}\\]4"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[BLUE]}\\]1"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[PURPLE]}\\]0"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[CYAN]}\\]0"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[RED]}\\]3"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[GREEN]}\\]1"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[YELLOW]}\\]3"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[BLUE]}\\]1"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[PURPLE]}\\]2"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[CYAN]}\\]0"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[RED]}\\]4"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[RESET]}\\]:\\w\\$ \""

    # 写入新的PS1设置
    echo "$rainbow_ps1" >> "${RAINBOW_PROMPT[BASHRC_FILE]}"
    
    source "${RAINBOW_PROMPT[BASHRC_FILE]}"
    RAINBOW_PROMPT::print_message "GREEN" "\n彩虹效果已成功应用！"
}

RAINBOW_PROMPT::restore_default() {
    if [ -f "${RAINBOW_PROMPT[BACKUP_FILE]}" ]; then
        cp "${RAINBOW_PROMPT[BACKUP_FILE]}" "${RAINBOW_PROMPT[BASHRC_FILE]}"
        source "${RAINBOW_PROMPT[BASHRC_FILE]}"
        RAINBOW_PROMPT::print_message "GREEN" "\n已成功恢复默认设置！"
    else
        RAINBOW_PROMPT::print_message "RED" "\n未找到备份文件，无法恢复默认设置！"
    fi
}

# 主程序命名空间
RAINBOW_PROMPT::main() {
    while true; do
        RAINBOW_PROMPT::show_menu
        read -p "请输入选项 [1-3]: " choice
        
        case $choice in
            1)
                RAINBOW_PROMPT::print_message "CYAN" "\n正在设置彩虹色主机名..."
                RAINBOW_PROMPT::create_rainbow_prompt
                RAINBOW_PROMPT::press_any_key
                ;;
            2)
                RAINBOW_PROMPT::print_message "CYAN" "\n正在恢复默认设置..."
                RAINBOW_PROMPT::restore_default
                RAINBOW_PROMPT::press_any_key
                ;;
            0)
                echo "返回主菜单..."
                break
                ;;
            *)
                RAINBOW_PROMPT::print_message "RED" "\n无效的选项，请重新选择！"
                RAINBOW_PROMPT::press_any_key
                ;;
        esac
    done
}

show_main_menu() {
    clear
    # 定义颜色
    LIGHTCYAN='\033[1;36m'  # 明亮的青色
    NC='\033[0m'  # 重置颜色

    # ASCII 艺术展示 "EMoMoMo"
    echo -e "${LIGHTCYAN}"
    echo "  ███████╗███╗   ███╗ ██████╗ ███╗   ███╗ ██████╗ ███╗   ███╗ ██████╗"
    echo "  ██╔════╝████╗ ████║██╔═══██╗████╗ ████║██╔═══██╗████╗ ████║██╔═══██╗"
    echo "  █████╗  ██╔████╔██║██║   ██║██╔████╔██║██║   ██║██╔████╔██║██║   ██║"
    echo "  ██╔══╝  ██║╚██╔╝██║██║   ██║██║╚██╔╝██║██║   ██║██║╚██╔╝██║██║   ██║"
    echo "  ███████╗██║ ╚═╝ ██║╚██████╔╝██║ ╚═╝ ██║╚██████╔╝██║ ╚═╝ ██║╚██████╔╝"
    echo "  ╚══════╝╚═╝     ╚═╝ ╚═════╝ ╚═╝     ╚═╝ ╚═════╝ ╚═╝     ╚═╝ ╚═════╝ "
    echo -e "${NC}"

    echo -e "${LIGHTCYAN}============================= VPS 脚本菜单 =============================${NC}"
    echo -e "${LIGHTBLUE}使用快捷指令 m 可快速打开脚本😊${NC}"
    echo -e "${PINK}作者：emo的小默默${NC}"
    echo -e "${LIGHTCYAN}=====================================================================${NC}"
    
    echo -e "${YELLOW}请选择要执行的任务：${NC}"

    echo -e "  ${BLUE}1.${NC} ${PINK}♥${NC} ${GREEN}搭建hy2节点${NC}       ${BLUE}09${NC} ${PINK}♥${NC} ${LIGHTCYAN}系统信息查询${NC}"
echo -e "  ${BLUE}2.${NC} ${PINK}♥${NC} ${GREEN}UFW 防火墙${NC}        ${BLUE}10${NC} ${PINK}♥${NC} ${LIGHTCYAN}IPv4/6优先${NC}"
echo -e "  ${BLUE}3.${NC} ${PINK}♥${NC} ${GREEN}配置密钥登录${NC}      ${BLUE}11${NC} ${PINK}♥${NC} ${LIGHTCYAN}更新主脚本${NC}"
echo -e "  ${BLUE}4.${NC} ${PINK}♥${NC} ${GREEN}修改登录端口${NC}      ${BLUE}12${NC} ${PINK}♥${NC} ${YELLOW}保持ssh连接${NC}"
echo -e "  ${BLUE}5.${NC} ${PINK}♥${NC} ${GREEN}一键搭建节点${NC}      ${BLUE}13${NC} ${PINK}♥${NC} ${YELLOW}一键DD系统 ▶${NC}"
echo -e "  ${BLUE}6.${NC} ${PINK}♥${NC} ${GREEN}一键配置WARP${NC}      ${BLUE}14${NC} ${PINK}♥${NC} ${RED}监控TG关键词 ▶${NC}"
echo -e "  ${BLUE}7.${NC} ${PINK}♥${NC} ${GREEN}一键BBR加速${NC}       ${BLUE}15${NC} ${PINK}♥${NC} ${RED}主机名颜色${NC}"
echo -e "  ${BLUE}8.${NC} ${PINK}♥${NC} ${LIGHTCYAN}Docker项目 ▶${NC}      ${BLUE}16${NC} ${PINK}♥${NC} ${RED}测试流媒体${NC}"
echo -e "  ${BLUE}17.${NC} ${PINK}♥${NC} ${YELLOW}配置反向代理${NC}"
echo -e "  ${BLUE}00${NC} ${PINK}♥${NC} ${RED}退出${NC}"
read -p "请输入选项 (0-17): " choice
  
  case "$choice" in
        1)
            execute_script "https://gist.githubusercontent.com/momo97620/68630501ec62d5f6ece848d5e3ffad4e/raw/203246731cde7f6ca90d8b2e934cf0ffa5127cb4/hy2" "搭建 Hysteria 节点完成。"
            ;;
        2)
            execute_script "https://gist.githubusercontent.com/momo97620/2ecbf06ce959fda14b01c0ce9f34f3d8/raw/ebbbdf08a05c890d72902863c53bf80af9531601/ufw_install.sh" "安装并配置 UFW 防火墙完成。"
            ;;
        3)
# 选项 3: 自动申请密钥并配置密钥登录
echo "执行选项 3：自动申请密钥并配置密钥登录..."

# 检查是否以 root 用户运行
if [ "$(id -u)" -ne 0 ]; then
    echo "请以 root 用户运行此脚本。"
    read -n 1 -s -r -p "按任意键返回菜单..."
    continue
fi

# 定义变量
KEY_DIR="$HOME/.ssh"
PRIVATE_KEY="$KEY_DIR/id_rsa"
PUBLIC_KEY="$KEY_DIR/id_rsa.pub"
SSHD_CONFIG="/etc/ssh/sshd_config"
BACKUP_CONFIG="/etc/ssh/sshd_config.bak"
CLOUD_INIT_CONFIG="/etc/ssh/sshd_config.d/50-cloud-init.conf"
PAM_SSHD_CONFIG="/etc/pam.d/sshd"

# 步骤 1：生成密钥对
echo "正在生成密钥对..."
mkdir -p "$KEY_DIR"
chmod 700 "$KEY_DIR"
ssh-keygen -t rsa -b 4096 -f "$PRIVATE_KEY" -N "" -q
if [ $? -ne 0 ]; then
    echo "密钥生成失败，请检查系统配置。"
    read -n 1 -s -r -p "按任意键返回菜单..."
    continue
fi
echo "密钥生成成功！"
echo "密钥文件路径："
echo "私钥: $PRIVATE_KEY"
echo "公钥: $PUBLIC_KEY"

# 显示公钥的 ASCII 图形化表示
echo "生成公钥的 ASCII 图形化表示..."
ssh-keygen -lv -f "$PUBLIC_KEY"

# 步骤 2：备份 sshd 配置文件
if [ ! -f "$BACKUP_CONFIG" ]; then
    cp "$SSHD_CONFIG" "$BACKUP_CONFIG"
    echo "sshd 配置文件已备份到 $BACKUP_CONFIG。"
else
    echo "sshd 配置文件已存在备份，跳过备份步骤。"
fi

# 步骤 3：配置公钥登录
echo "正在配置公钥登录..."
AUTHORIZED_KEYS="$KEY_DIR/authorized_keys"
cat "$PUBLIC_KEY" >> "$AUTHORIZED_KEYS"
chmod 600 "$AUTHORIZED_KEYS"
chown -R "$(whoami):$(whoami)" "$KEY_DIR"
echo "公钥已添加到 $AUTHORIZED_KEYS。"

# 步骤 4：修改 SSH 配置以禁用密码登录（延迟生效）
echo "修改 SSH 配置以禁用密码登录..."
if ! grep -q "^PasswordAuthentication" "$SSHD_CONFIG"; then
    echo "PasswordAuthentication yes" >> "$SSHD_CONFIG"
fi
sed -i 's/^PasswordAuthentication yes/PasswordAuthentication no/' "$SSHD_CONFIG"
sed -i 's/^#PasswordAuthentication no/PasswordAuthentication no/' "$SSHD_CONFIG"
if ! grep -q "^PubkeyAuthentication yes" "$SSHD_CONFIG"; then
    echo "PubkeyAuthentication yes" >> "$SSHD_CONFIG"
fi
if ! grep -q "^ChallengeResponseAuthentication no" "$SSHD_CONFIG"; then
    echo "ChallengeResponseAuthentication no" >> "$SSHD_CONFIG"
fi
if grep -q "^UsePAM yes" "$SSHD_CONFIG"; then
    sed -i 's/^UsePAM yes/UsePAM no/' "$SSHD_CONFIG"
fi

# 步骤 5：清空 cloud-init 配置文件并添加 PasswordAuthentication no
if [ -f "$CLOUD_INIT_CONFIG" ]; then
    echo "检测到 $CLOUD_INIT_CONFIG，清空文件并添加 PasswordAuthentication no..."
    
    # 清空文件内容
    > "$CLOUD_INIT_CONFIG"
    
    # 添加配置
    echo "PasswordAuthentication no" >> "$CLOUD_INIT_CONFIG"

    # 确保修改生效
    if grep -q "^PasswordAuthentication no" "$CLOUD_INIT_CONFIG"; then
        echo "成功修改 $CLOUD_INIT_CONFIG 中的 PasswordAuthentication 为 no。"
    else
        echo "修改 $CLOUD_INIT_CONFIG 失败，请手动检查文件。"
    fi
fi

# 步骤 6：注释掉 PAM 配置中的 @include common-auth
if [ -f "$PAM_SSHD_CONFIG" ]; then
    echo "注释掉 PAM 配置中的 @include common-auth..."
    sed -i 's/^@include common-auth/#@include common-auth/' "$PAM_SSHD_CONFIG"
fi

# 提示用户当前会话不会失效
echo -e "${DARK_RED}重要提示：${NC}"
echo -e "${DARK_RED}‼️  切记要先保存好私钥！！！。${NC}"
echo -e "${DARK_RED}‼️  退出菜单输入以下重启命令:${NC}"
echo -e "${DARK_RED}‼️  systemctl restart sshd${NC}"
echo -e "${DARK_RED}‼️  然后重启SSH禁用密码才会被加载、然后用私钥登录${NC}"

echo -e "${BRIGHT_GREEN}公钥路径: $PUBLIC_KEY${NC}"
echo -e "${BRIGHT_GREEN}私钥路径: $PRIVATE_KEY${NC}"

# 等待用户按任意键返回菜单
echo ""
read -n 1 -s -r -p "按任意键返回菜单..."
echo ""
            ;;
        4)
            execute_script "https://gist.githubusercontent.com/momo97620/685e1ead90ed0ad379c6a75e27409704/raw/aaeabe347f3612e9c308b898e64bcfd12276a067/duank" "修改登录端口号完成。"
            ;;
        5)
            execute_script "https://github.com/233boy/sing-box/raw/main/install.sh" "一键搭建节点完成。"
            ;;
        6)
            execute_script "https://gitlab.com/fscarmen/warp/-/raw/main/menu.sh" "一键WARP完成。"
            ;;
        7)
            execute_script "https://github.com/ylx2016/Linux-NetSpeed/raw/master/tcp.sh" "BBR加速完成。"
            ;;
        8)
            # 调用系统管理菜单
while true; do
    clear  # 清除屏幕
    # 函数：检测 LDNMP 环境
check_ldnmp() {
    # 检测 PHP 版本
    if command -v php &> /dev/null; then
        php_version="PHP: $(php -v | head -n 1 | awk '{print $2}')"
    else
        php_version="PHP: 未安装"
    fi

    # 检测 MySQL 版本
    if command -v mysql &> /dev/null; then
        mysql_version="MySQL: $(mysql --version | awk '{print $5}')"
    else
        mysql_version="MySQL: 未安装"
    fi

    # 检测 Nginx 版本
    if command -v nginx &> /dev/null; then
        nginx_version="Nginx: $(nginx -v 2>&1 | awk -F/ '{print $2}')"
    else
        nginx_version="Nginx: 未安装"
    fi

    # 检测 Docker 版本
    if command -v docker &> /dev/null; then
        docker_version="Docker: $(docker --version | awk '{print $3}' | sed 's/,//')"
    else
        docker_version="Docker: 未安装"
    fi
              echo -e "${BLUE}\n===== LDNMP 环境检测 =====${NC}"
    # 输出结果为一排
    echo -e "${BOLD_GREEN} ${docker_version} | ${mysql_version} | ${php_version} | ${nginx_version}${NC}"
    
    echo -e "${DEEPRED}-----------------------------${NC}"
}
# 自动检测 LDNMP 环境
check_ldnmp 
    echo -e "${GREEN}1.${NC} ${LIGHTBLUE}docker安装${NC}    ${YELLOW}2.${NC} ${PINK}NextChatGPT${NC}"
    echo -e "----------------------------"
    echo -e "${BLUE}3.${NC} ${LIGHTCYAN}RSSHub部署${NC}    ${LIGHTBLUE}4.${NC} ${GREEN}简单图床2.0${NC}"
    echo -e "----------------------------"
    echo -e "${DEEPRED}5.${NC} ${RED}增加1G空间${NC}"
    echo -e "----------------------------"
    echo -e "${DEEPRED}0.${NC} ${RED}返回主菜单${NC}"
    echo -e "============================"
    # 提示用户安装 Docker
echo -e "${LIGHTCYAN}⚠️ 所有项目安装前需要先安装 Docker！否则提示安装失败。${NC}"

    read -p "请输入你的选择 [1-4, 0]: " sys_choice

    case $sys_choice in
        1)
            execute_script "https://raw.githubusercontent.com/momo97620/momoya/refs/heads/main/docker" "Docker管理完成。"
            ;;
        2)
            clear  # 清除屏幕
            # 颜色定义
GREEN='\033[0;32m'
RED='\033[0;31m'
DEEPRED='\033[1;31m'  # 深红色
NC='\033[0m'          # 无颜色

# 检查并设置 locale
if ! grep -q "export LANG=en_US.UTF-8" ~/.bashrc; then
    echo "export LANG=en_US.UTF-8" >> ~/.bashrc
fi

if ! grep -q "export LC_ALL=en_US.UTF-8" ~/.bashrc; then
    echo "export LC_ALL=en_US.UTF-8" >> ~/.bashrc
fi

# 立即生效
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

setup_nextchat() {
    # 设置工作目录
    local work="/docker/nextchat"
    mkdir -p "$work" && cd "$work" || { echo "无法进入工作目录"; exit 1; }

    # 创建 docker-compose.yml 文件并写入基础配置
    cat <<EOL > docker-compose.yml
version: '3'
services:
  chatgpt-next-web:
    container_name: nextchat
    image: yidadaa/chatgpt-next-web:latest
    restart: always
    ports:
      - "8842:3000"
    environment:
      - OPENAI_API_KEY=sk-xxx #你的api key
      - CODE=emomomo  #密码
      - BASE_URL=https://xx.xx.io #第三方代理地址
      - DEFAULT_MODEL=gpt-4o-mini  #默认模型
      - ENABLE_BALANCE_QUERY=1  #启用余额查询
# 
# 注意修改换成你的key令牌.然后修改代理地址:

# 修改代理地址(就是你取api key的网站他们要求填他们的第三方地址)

# 后台管理员密码默认(emomomo)  其他不用修改

# 修改完成后按住ctrl不放然后再按x  然后按y回车(保存)
EOL

    # 使用 nano 编辑器打开 docker-compose.yml 供用户修改
    nano docker-compose.yml

    # 用户保存退出后，自动运行 docker-compose up -d
    if docker-compose up -d; then
        echo -e "${GREEN}✅ Docker 容器启动成功！${NC}"
    else
        echo -e "${RED}❌ Docker 容器启动失败！请检查是否安装docker-compose。${NC}"
        exit 1
    fi

    # 提示用户
    echo -e "${DEEPRED}1.${NC} ⚠️ ${DEEPRED}请手动放行8842端口！！${NC}"
    echo -e "${DEEPRED}2.${NC} ⚠️ ${DEEPRED}后台登录方式：本机IP+8842！！${NC}"
    
    # 等待用户按任意键返回主菜单
    read -n 1 -s -r -p "按任意键返回主菜单..."
}

# 调用函数
setup_nextchat
           ;;
        3)
            # 创建一个 1GB 的交换文件
sudo fallocate -l 1G /swapfile
# 设置正确的权限
sudo chmod 600 /swapfile
# 将文件设置为交换空间
sudo mkswap /swapfile
# 启用交换空间
sudo swapon /swapfile
# 确保在重启后自动启用交换空间
echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab

echo "开始部署 RSSHub..."
hostname=$(hostname)
echo "本机名: $hostname"

# 检查是否已安装 RSSHub
if docker ps -a --format '{{.Names}}' | grep -qw rsshub; then
    echo "RSSHub 已安装。"
    echo
    read -n 1 -s -r -p "按任意键返回菜单..."
else
    echo "正在拉取 RSSHub 镜像..."
    if ! docker pull diygod/rsshub; then
        echo "拉取 RSSHub 镜像失败，请检查网络连接！"
        exit 1
    fi

    echo "正在运行 RSSHub 容器..."
    if ! docker run -d --name rsshub -p 1200:1200 diygod/rsshub; then
        echo "运行 RSSHub 容器失败，请检查 Docker 设置！"
        exit 1
    fi

    echo "RSSHub 部署完成！端口：1200"
    echo
    read -n 1 -s -r -p "操作完成，按任意键返回菜单..."
fi
      ;;
        4)
# 检查 Docker 是否安装
if ! command -v docker &> /dev/null; then
    echo "Docker 未安装，请先安装 Docker。"
    exit 1
fi

# 检查 Docker Compose 是否安装
if ! command -v docker-compose &> /dev/null; then
    echo "Docker Compose 未安装，请先安装 Docker Compose。"
    exit 1
fi

# 创建目录
mkdir -p /root/data/docker_data/easyimage
if [ $? -ne 0 ]; then
    echo "创建目录失败，请检查权限或磁盘空间。"
    exit 1
fi

# 进入目录
cd /root/data/docker_data/easyimage || { echo "无法进入目录，请检查路径。"; exit 1; }

# 创建 docker-compose.yml 文件
cat > docker-compose.yml <<EOF
version: '3.3'
services:
  easyimage:
    image: ddsderek/easyimage:latest
    container_name: easyimage
    ports:
      - '8080:80'
    environment:
      - TZ=Asia/Shanghai
      - PUID=1000
      - PGID=1000
    volumes:
      - '/root/data/docker_data/easyimage/config:/app/web/config'
      - '/root/data/docker_data/easyimage/i:/app/web/i'
    restart: unless-stopped
EOF
if [ $? -ne 0 ]; then
    echo "创建 docker-compose.yml 文件失败。"
    exit 1
fi

# 启动容器
docker-compose up -d
if [ $? -ne 0 ]; then
    echo "启动容器失败，请检查 Docker 和 Compose 的状态。"
    exit 1
fi

# 提示用户
echo "已安装成功，请手动放行8080端口，使用IP+8080浏览器登录。"

# 等待用户按任意键返回
read -n 1 -s -r -p "按任意键返回上一页..."

            ;;
            
        5)
           echo "正在创建1G的交换空间..."
            fallocate -l 1G /swapfile
            chmod 600 /swapfile
            mkswap /swapfile
            swapon /swapfile
            echo '/swapfile none swap sw 0 0' | tee -a /etc/fstab
            echo "1G的交换空间已成功创建并启用。"
            read -n 1 -s -r -p "按任意键返回菜单..."
            ;;  
        0)
            echo "返回主菜单..."
            break
            ;;
        *)
            clear  # 清除屏幕
            echo "无效选择，请重新输入！"
            read -p "按任意键继续..."
            ;;
    esac
done
            ;;    
        9)
            execute_script "https://raw.githubusercontent.com/momo97620/momoya/main/xitong" "系统信息查询完成。"
            ;;
        10)
            set_ip_priority
            ;;
        11)
            update_script
            ;;
        12) 
            set_ssh_keepalive
            ;;
        13) 
 while true; do
    clear
    echo -e "${BLUE}----------------------------------------${NC}"
echo -e "${BLUE}            DD重装系统            ${NC}"
echo -e "${BLUE}----------------------------------------${NC}"
echo -e "\n${BLUE}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${NC}\n"  # 美化空行

echo -e "${GREEN}1.${NC} 国外服务器"
echo -e "\n${BLUE}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${NC}\n"  # 美化空行
echo -e "${GREEN}2.${NC} 国内服务器"
echo -e "\n${BLUE}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${NC}\n"  # 美化空行
echo -e "${GREEN}3.${NC} 另一个DD(史上最强)"
echo -e "\n${BLUE}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${NC}\n"  # 美化空行
echo -e "${GREEN}0.${NC} 返回主菜单"
echo -e "\n${BLUE}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${NC}\n"  # 美化空行
echo -e "\n"  # 添加空行
# 提示用户输入选项
read -p "请输入选项 [1-3，0]: " sub_choice  

    case $sub_choice in
        1)
            curl -O https://raw.githubusercontent.com/bin456789/reinstall/main/reinstall.sh || wget -O reinstall.sh $_
            ;;
        2)
            curl -O https://jihulab.com/bin456789/reinstall/-/raw/main/reinstall.sh || wget -O reinstall.sh $_
            ;;
        3)
            curl -O https://raw.githubusercontent.com/momo97620/momoya/refs/heads/main/dd && chmod +x dd && ./dd
            ;;
        0)
            echo "返回主菜单..."
                break
            ;;
        *)
            echo -e "${RED}无效选项!${NC}"
            sleep 2
            continue
            ;;
    esac

    # 赋予权限
    chmod +x reinstall.sh
    # 跳转到下一个子菜单
    while true; do
        clear
        echo -e "${BLUE}----------------------------------------${NC}"
        echo -e "${BLUE}            选择您的系统版本            ${NC}"
        echo -e "${BLUE}----------------------------------------${NC}"
        echo -e "${GREEN}1.${NC} Debian 10"
        echo -e "${GREEN}2.${NC} Debian 11"
        echo -e "${GREEN}3.${NC} Debian 12"
        echo -e "${GREEN}4.${NC} Ubuntu 16.04"
        echo -e "${GREEN}5.${NC} Ubuntu 18.04"
        echo -e "${GREEN}6.${NC} Ubuntu 20.04"
        echo -e "${GREEN}7.${NC} Ubuntu 24.04"
        echo -e "${GREEN}0.${NC} 返回上级菜单"
        echo -e "${BLUE}----------------------------------------${NC}"
        read -p "请输入选项 [1-7，0]: " version_choice

        case $version_choice in
            1)
                bash reinstall.sh "Debian 10"
                ;;
            2)
                bash reinstall.sh "Debian 11"
                ;;
            3)
                bash reinstall.sh "Debian 12"
                ;;
            4)
                bash reinstall.sh "Ubuntu 16.04"
                ;;
            5)
                bash reinstall.sh "Ubuntu 18.04"
                ;;
            6)
                bash reinstall.sh "Ubuntu 20.04"
                ;;
            7)
                bash reinstall.sh "Ubuntu 24.04"
                ;;
            0)
                echo "返回主菜单..."
                break
                ;;
            *)
                echo -e "${RED}无效选项!${NC}"
                sleep 2
                ;;
        esac
    done
done

            ;;  
        14) 
             execute_script "https://raw.githubusercontent.com/ecouus/Feed-Push/refs/heads/main/bot_deploy.sh" "TG关键词订阅部署完成。"
            ;;  
        15)
            RAINBOW_PROMPT::main
            ;;
        16)
            while true; do
            clear
            echo -e "${BLUE}----------------------------------------${NC}"
            echo -e "${BLUE}            测试流媒体子菜单            ${NC}"
            echo -e "${BLUE}----------------------------------------${NC}"
            echo -e "${GREEN}1.${NC} 流媒体测试"
            echo -e "${GREEN}2.${NC} 融合怪测试"
            echo -e "${GREEN}0.${NC} 返回主菜单"
            echo -e "${BLUE}----------------------------------------${NC}"
            read -p "请输入选项 [0-2，0]: " sub_choice

        case $sub_choice in
            1)
                bash <(curl -sL IP.Check.Place)
                ;;
            2)
                curl -L https://gitlab.com/spiritysdx/za/-/raw/main/ecs.sh -o ecs.sh && chmod +x ecs.sh && bash ecs.sh
                ;;
            0)
                echo "返回主菜单..."
                break
                ;;
            *)
                echo -e "${RED}无效选项!${NC}"
                sleep 2
                ;;
        esac
    done
    ;;
            17)
                curl -O https://raw.githubusercontent.com/momo97620/momoya/refs/heads/main/Nginx && chmod +x Nginx && ./Nginx
                ;;
                
            0)
              echo -e "${GREEN}退出程序...${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}无效的选择，请重新输入！${NC}"
            ;;
    esac
}
       
       
# 主执行逻辑
main() {
    
    if [[ "$1" == "install" ]]; then
        install_script
        exit 0
    fi

    if [ ! -d "$INSTALL_DIR" ]; then
        install_script
    else
        echo -e "${GREEN}脚本已安装到：$INSTALL_DIR${NC}"
    fi

    # 调用主菜单
    while true; do
        show_main_menu
    done
}

# 执行主逻辑
main "$@"