#!/bin/bash

# 定义颜色
NC='\033[0m'
BLUE='\033[38;5;39m'      # 蓝色
CYAN='\033[38;5;51m'      # 青色
PURPLE='\033[38;5;147m'   # 浅紫色
PINK='\033[38;5;218m'     # 粉色
WHITE='\033[38;5;15m'     # 白色
LIGHT_BLUE='\033[38;5;117m' # 浅蓝色

# 定义符号链接的目标和链接名称
LINK_NAME="/usr/local/bin/m"
SCRIPT_PATH="/root/vps666"

# 检查符号链接是否已经存在
if [ ! -L "$LINK_NAME" ]; then
    ln -s "$SCRIPT_PATH" "$LINK_NAME"
    echo -e "${GREEN}符号链接 $LINK_NAME 已创建。${NC}"
else
    echo -e "${YELLOW}符号链接 $LINK_NAME 已存在。${NC}"
fi

# 获取脚本路径
SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]}")
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")

# 定义固定安装路径
INSTALL_DIR="/root/vps666"

# 检查脚本是否被直接运行
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    echo -e "${RED}此脚本必须直接运行，而不是被引用。${NC}"
    exit 1
fi

# 检查是否以 root 用户运行
if [ "$(id -u)" != "0" ]; then
    echo -e "${RED}请以 root 用户运行脚本。${NC}"
    exit 1
fi

# 安装主脚本
install_script() {
    echo -e "${YELLOW}正在安装：将脚本安装到 $INSTALL_DIR...${NC}"
    
    if [ ! -d "$INSTALL_DIR" ]; then
        mkdir -p "$INSTALL_DIR"
    fi
    
    cp "$SCRIPT_PATH" "$INSTALL_DIR"
    chmod +x "$INSTALL_DIR/$(basename "$SCRIPT_PATH")"
    
    echo -e "${GREEN}脚本已安装到 $INSTALL_DIR。${NC}"
}

# 执行子脚本
execute_script() {
    local script_url="$1"
    local success_message="$2"
    
    bash <(curl -sSL "$script_url")
    echo -e "${GREEN}$success_message${NC}"
    
    read -p "按任意键返回主菜单..."
}

# 定义 configure_ssh_pam 函数
configure_ssh_pam() {
    # 检查是否以 root 权限运行
    if [[ $EUID -ne 0 ]]; then
        echo -e "\033[0;31m[错误] 请以 root 权限运行此脚本。\033[0m"
        exit 1
    fi

    # 设置变量
    local SSHD_CONFIG="/etc/ssh/sshd_config"
    local COMMON_AUTH="/etc/pam.d/common-auth"
    local SSH_KEY_DIR="$HOME/.ssh"
    local SSH_KEY_FILE="$SSH_KEY_DIR/id_rsa"
    local AUTHORIZED_KEYS="$SSH_KEY_DIR/authorized_keys"

    # 打印界面信息
    print_banner() {
        echo -e "\033[1;32m=======================================\033[0m"
        echo -e "\033[1;32m   SSH 和 PAM 配置自动化脚本（增强版）   \033[0m"
        echo -e "\033[1;32m=======================================\033[0m"
    }

    # 禁用 UsePAM
    disable_use_pam() {
        echo -e "\033[1;34m正在禁用 UsePAM...\033[0m"
        if grep -q "^UsePAM" "$SSHD_CONFIG"; then
            sed -i.bak '/^UsePAM/c\UsePAM no' "$SSHD_CONFIG"
            echo -e "\033[1;32m已将 UsePAM 设置为 no。\033[0m"
        else
            echo "UsePAM no" >> "$SSHD_CONFIG"
            echo -e "\033[1;32m已添加 UsePAM no。\033[0m"
        fi
    }

    # 注释掉指定的行
    comment_out_lines() {
        echo -e "\033[1;34m正在注释掉 PAM 模块指定行...\033[0m"
        sed -i.bak '/^# here are the per-package modules (the "Primary" block)/s/^/# /' "$COMMON_AUTH"
        sed -i '/^auth\s\+\[success=1 default=ignore\]\s\+pam_unix.so nullok/s/^/# /' "$COMMON_AUTH"

        if grep -q "^# auth\s\+\[success=1 default=ignore\]\s\+pam_unix.so nullok" "$COMMON_AUTH"; then
            echo -e "\033[1;32m已成功注释指定的行。\033[0m"
        else
            echo -e "\033[0;31m[警告] 未成功注释指定的行，请手动检查。\033[0m"
        fi
    }

    # 禁用密码登录（配置不会立即生效，需重启 SSH 服务）
    disable_password_auth() {
        echo -e "\033[1;34m正在禁用密码登录...\033[0m"
        if grep -q "^PasswordAuthentication" "$SSHD_CONFIG"; then
            sed -i '/^PasswordAuthentication/c\PasswordAuthentication no' "$SSHD_CONFIG"
            echo -e "\033[1;32m已将 PasswordAuthentication 设置为 no。\033[0m"
        else
            echo "PasswordAuthentication no" >> "$SSHD_CONFIG"
            echo -e "\033[1;32m已添加 PasswordAuthentication no。\033[0m"
        fi
        echo -e "\033[1;31m注意：禁用密码登录的配置将在重启 SSH 服务后生效！\033[0m"
    }

    # 自动生成 SSH 密钥并添加到本机
    generate_ssh_key() {
        echo -e "\033[1;34m正在检查或生成 SSH 密钥对...\033[0m"
        if [[ ! -f "$SSH_KEY_FILE" ]]; then
            mkdir -p "$SSH_KEY_DIR"
            chmod 700 "$SSH_KEY_DIR"
            ssh-keygen -t rsa -b 4096 -f "$SSH_KEY_FILE" -N "" >/dev/null
            echo -e "\033[1;32m已成功生成 SSH 密钥对。\033[0m"
            echo -e "\033[1;32m私钥文件：$SSH_KEY_FILE\033[0m"
            echo -e "\033[1;32m公钥文件：$SSH_KEY_FILE.pub\033[0m"

            # 将公钥添加到 authorized_keys
            if [[ ! -f "$AUTHORIZED_KEYS" ]]; then
                touch "$AUTHORIZED_KEYS"
                chmod 600 "$AUTHORIZED_KEYS"
            fi

            cat "$SSH_KEY_FILE.pub" >> "$AUTHORIZED_KEYS"
            echo -e "\033[1;32m已将公钥添加到本机的 authorized_keys 文件。\033[0m"
        else
            echo -e "\033[1;32mSSH 密钥已存在，跳过生成步骤。\033[0m"
            echo -e "\033[1;32m私钥文件：$SSH_KEY_FILE\033[0m"
            echo -e "\033[1;32m公钥文件：$SSH_KEY_FILE.pub\033[0m"
        fi
    }

    # 提示用户手动重启 SSH 服务
    prompt_manual_restart() {
        echo -e "\033[1;34m请手动重启 SSH 服务，以应用更改：\033[0m"
        echo -e "\033[1;32m命令：systemctl restart sshd\033[0m"
    }

    # 主脚本逻辑
    main() {
        print_banner
        disable_use_pam          # 禁用 UsePAM
        comment_out_lines        # 注释掉 PAM 模块指定行
        disable_password_auth    # 禁用密码登录（配置不会立即生效）
        generate_ssh_key         # 自动生成 SSH 密钥对并添加到本机
        prompt_manual_restart    # 提示用户手动重启 SSH 服务
        echo -e "\033[1;32m配置完成！\033[0m"
    }

    # 执行主逻辑
    main

    # 返回提示
    echo -e "\033[1;34m按任意键退出脚本...\033[0m"
    read -n 1 -s
}

# 设置 IPv4/6 优先级
set_ip_priority() {
    check_current_priority() {
        if grep -q "net.ipv6.conf.all.disable_ipv6 = 1" /etc/sysctl.conf; then
            echo "当前优先级：IPv4"
        else
            echo "当前优先级：IPv6"
        fi
    }

    set_priority() {
        case "$1" in
            1)
                echo "正在设置优先使用 IPv4..."
                echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf
                echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.conf
                sysctl -p
                echo "IPv4 优先设置完成！"
                ;;
            2)
                echo "正在设置优先使用 IPv6..."
                sed -i '/net.ipv6.conf.all.disable_ipv6/d' /etc/sysctl.conf
                sed -i '/net.ipv6.conf.default.disable_ipv6/d' /etc/sysctl.conf
                echo "net.ipv6.conf.all.disable_ipv6 = 0" >> /etc/sysctl.conf
                echo "net.ipv6.conf.default.disable_ipv6 = 0" >> /etc/sysctl.conf
                sysctl -p
                echo "IPv6 优先设置完成！"
                ;;
            *)
                echo "无效的选项！请输入 '1' 或 '2'。"
                exit 1
                ;;
        esac
    }

    show_menu() {
        clear
        echo "==============================="
        echo " 设置 IPv4 或 IPv6 优先级"
        echo "==============================="
        check_current_priority
        echo "1. 优先使用 IPv4"
        echo "2. 优先使用 IPv6"
        echo "==============================="
        read -p "请输入选项 [1/2]：" choice
        set_priority "$choice"
        echo "设置完成！按任意键退出..."
        read -n 1 -s -r
    }

    show_menu
}

# 更新脚本
update_script() {
    local remote_url="https://raw.githubusercontent.com/momo97620/momoya/refs/heads/main/vps666"
    local local_path="/root/vps666"

    echo -e "${YELLOW}正在更新脚本到最新版本...${NC}"

    if curl -sSL "$remote_url" -o "$local_path"; then
        chmod +x "$local_path"
        echo -e "${GREEN}脚本更新成功！最新版本已保存到 $local_path。${NC}"
    else
        echo -e "${RED}脚本更新失败，请检查远程 URL 是否正确。${NC}"
    fi

    read -p "按任意键返回主菜单..."
}

set_ssh_keepalive() {
    local config_file="/etc/ssh/sshd_config"
    local interval=60
    local count=10

    echo "正在配置 SSH 客户端保持连接参数..."
    if [[ ! -f "$config_file" ]]; then
        echo "错误：SSH 配置文件 $config_file 不存在。" >&2
        exit 1
    fi

    read -p "是否确认修改 SSH 配置？(y/n): " confirm
    if [[ "$confirm" != "y" ]]; then
        echo "取消修改。"
        exit 0
    fi

    read -p "请输入 ClientAliveInterval 值（默认 60）: " user_interval
    if [[ -n "$user_interval" ]]; then
        interval=$user_interval
    fi

    read -p "请输入 ClientAliveCountMax 值（默认 10）: " user_count
    if [[ -n "$user_count" ]]; then
        count=$user_count
    fi

    if grep -q '^#\?ClientAliveInterval' "$config_file"; then
        sed -ri "s/^#?.*ClientAliveInterval.*/ClientAliveInterval $interval/" "$config_file"
    else
        echo "ClientAliveInterval $interval" >> "$config_file"
    fi

    if grep -q '^#\?ClientAliveCountMax' "$config_file"; then
        sed -ri "s/^#?.*ClientAliveCountMax.*/ClientAliveCountMax $count/" "$config_file"
    else
        echo "ClientAliveCountMax $count" >> "$config_file"
    fi

    echo "重启 SSH 服务以应用更改..."
    sudo systemctl restart sshd
    if [[ $? -eq 0 ]]; then
        echo "SSH 配置已更新并成功应用！"
    else
        echo "SSH 服务重启失败，请检查配置。" >&2
        exit 1
    fi
    echo "按任意键返回主菜单..."
    read -n 1 -s -r
}

download_reinstall_script() {
    while true; do
        echo "请选择DD对应vps："
        echo "1. 国外服务器"
        echo "2. 国内服务器"
        echo "0. 退出"
        read -p "请输入选项 (0, 1 或 2): " choice

        case $choice in
            1)
                echo "从国外服务器下载..."
                curl -O https://raw.githubusercontent.com/bin456789/reinstall/main/reinstall.sh || wget -O reinstall.sh https://raw.githubusercontent.com/bin456789/reinstall/main/reinstall.sh
                break
                ;;
            2)
                echo "从国内服务器下载..."
                curl -O https://www.ghproxy.com/https://raw.githubusercontent.com/bin456789/reinstall/main/reinstall.sh || wget -O reinstall.sh https://www.ghproxy.com/https://raw.githubusercontent.com/bin456789/reinstall/main/reinstall.sh
                break
                ;;
            0)
                echo "退出脚本。"
                exit 0
                ;;
            *)
                echo "无效选项，请选择 0, 1 或 2。"
                ;;
        esac
    done
}

run_reinstall_script() {
    while true; do
        echo -e "${GREEN}请选择要安装的系统版本：${NC}"
        echo -e "${RED}1. Ubuntu 22.04${NC}"
        echo -e "${YELLOW}2. Ubuntu 20.04${NC}"
        echo -e "${BLUE}3. Ubuntu 24.04${NC}"
        echo -e "${MAGENTA}4. Debian 11${NC}"
        echo -e "${CYAN}5. Debian 12${NC}"
        echo -e "${GREEN}0. 退出${NC}"
        read -p "请输入选项 (0-5): " choice

        case $choice in
            1)
                bash reinstall.sh ubuntu 22.04
                break
                ;;
            2)
                bash reinstall.sh ubuntu 20.04
                break
                ;;
            3)
                bash reinstall.sh ubuntu 24.04
                break
                ;;
            4)
                bash reinstall.sh debian 11
                break
                ;;
            5)
                bash reinstall.sh debian 12
                break
                ;;
            0)
                echo "退出脚本。"
                exit 0
                ;;
            *)
                echo "无效选项，请选择 0-5。"
                ;;
        esac
    done
}

# 定义命名空间
declare -A RAINBOW_PROMPT

# 颜色代码命名空间
RAINBOW_PROMPT[RED]='\033[0;31m'
RAINBOW_PROMPT[GREEN]='\033[0;32m'
RAINBOW_PROMPT[YELLOW]='\033[0;33m'
RAINBOW_PROMPT[BLUE]='\033[0;34m'
RAINBOW_PROMPT[PURPLE]='\033[0;35m'
RAINBOW_PROMPT[CYAN]='\033[0;36m'
RAINBOW_PROMPT[WHITE]='\033[0;37m'
RAINBOW_PROMPT[RESET]='\033[0m'

# 配置命名空间
RAINBOW_PROMPT[BACKUP_FILE]="$HOME/.bashrc.backup"
RAINBOW_PROMPT[BASHRC_FILE]="$HOME/.bashrc"

# 工具函数命名空间
RAINBOW_PROMPT::print_message() {
    local color=$1
    local message=$2
    echo -e "${RAINBOW_PROMPT[$color]}$message${RAINBOW_PROMPT[RESET]}"
}

RAINBOW_PROMPT::show_menu() {
    clear
    echo "================================"
    echo "       VPS主机名颜色设置        "
    echo "================================"
    echo "1. 设置彩虹色主机名"
    echo "2. 恢复默认设置"
    echo "3. 退出程序"
    echo "================================"
}

RAINBOW_PROMPT::create_backup() {
    if [ ! -f "${RAINBOW_PROMPT[BACKUP_FILE]}" ]; then
        cp "${RAINBOW_PROMPT[BASHRC_FILE]}" "${RAINBOW_PROMPT[BACKUP_FILE]}"
    fi
}

RAINBOW_PROMPT::press_any_key() {
    RAINBOW_PROMPT::print_message "YELLOW" "\n按任意键返回主菜单..."
    read -n 1 -s -r
}

# 核心功能命名空间
RAINBOW_PROMPT::create_rainbow_prompt() {
    RAINBOW_PROMPT::create_backup
    
    # 修改 .bashrc 文件
    sed -i '/^PS1=/d' "${RAINBOW_PROMPT[BASHRC_FILE]}"
    
    # 构建彩虹PS1
    local rainbow_ps1="PS1=\""
    rainbow_ps1+="\\[${RAINBOW_PROMPT[RED]}\\]r"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[GREEN]}\\]o"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[YELLOW]}\\]o"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[BLUE]}\\]t"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[PURPLE]}\\]@"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[CYAN]}\\]h"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[RED]}\\]k"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[GREEN]}\\]g"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[YELLOW]}\\]1"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[BLUE]}\\]1"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[PURPLE]}\\]-"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[CYAN]}\\]2"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[RED]}\\]0"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[GREEN]}\\]2"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[YELLOW]}\\]4"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[BLUE]}\\]1"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[PURPLE]}\\]0"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[CYAN]}\\]0"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[RED]}\\]3"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[GREEN]}\\]1"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[YELLOW]}\\]3"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[BLUE]}\\]1"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[PURPLE]}\\]2"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[CYAN]}\\]0"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[RED]}\\]4"
    rainbow_ps1+="\\[${RAINBOW_PROMPT[RESET]}\\]:\\w\\$ \""

    # 写入新的PS1设置
    echo "$rainbow_ps1" >> "${RAINBOW_PROMPT[BASHRC_FILE]}"
    
    source "${RAINBOW_PROMPT[BASHRC_FILE]}"
    RAINBOW_PROMPT::print_message "GREEN" "\n彩虹效果已成功应用！"
}

RAINBOW_PROMPT::restore_default() {
    if [ -f "${RAINBOW_PROMPT[BACKUP_FILE]}" ]; then
        cp "${RAINBOW_PROMPT[BACKUP_FILE]}" "${RAINBOW_PROMPT[BASHRC_FILE]}"
        source "${RAINBOW_PROMPT[BASHRC_FILE]}"
        RAINBOW_PROMPT::print_message "GREEN" "\n已成功恢复默认设置！"
    else
        RAINBOW_PROMPT::print_message "RED" "\n未找到备份文件，无法恢复默认设置！"
    fi
}

# 主程序命名空间
RAINBOW_PROMPT::main() {
    while true; do
        RAINBOW_PROMPT::show_menu
        read -p "请输入选项 [1-3]: " choice
        
        case $choice in
            1)
                RAINBOW_PROMPT::print_message "CYAN" "\n正在设置彩虹色主机名..."
                RAINBOW_PROMPT::create_rainbow_prompt
                RAINBOW_PROMPT::press_any_key
                ;;
            2)
                RAINBOW_PROMPT::print_message "CYAN" "\n正在恢复默认设置..."
                RAINBOW_PROMPT::restore_default
                RAINBOW_PROMPT::press_any_key
                ;;
            3)
                RAINBOW_PROMPT::print_message "GREEN" "\n感谢使用，再见！"
                exit 0
                ;;
            *)
                RAINBOW_PROMPT::print_message "RED" "\n无效的选项，请重新选择！"
                RAINBOW_PROMPT::press_any_key
                ;;
        esac
    done
}

show_main_menu() {
    clear
    # 定义颜色
    LIGHTCYAN='\033[1;36m'  # 明亮的青色
    NC='\033[0m'  # 重置颜色

    # ASCII 艺术展示 "EMoMoMo"
    echo -e "${LIGHTCYAN}"
    echo "  ███████╗███╗   ███╗ ██████╗ ███╗   ███╗ ██████╗ ███╗   ███╗ ██████╗"
    echo "  ██╔════╝████╗ ████║██╔═══██╗████╗ ████║██╔═══██╗████╗ ████║██╔═══██╗"
    echo "  █████╗  ██╔████╔██║██║   ██║██╔████╔██║██║   ██║██╔████╔██║██║   ██║"
    echo "  ██╔══╝  ██║╚██╔╝██║██║   ██║██║╚██╔╝██║██║   ██║██║╚██╔╝██║██║   ██║"
    echo "  ███████╗██║ ╚═╝ ██║╚██████╔╝██║ ╚═╝ ██║╚██████╔╝██║ ╚═╝ ██║╚██████╔╝"
    echo "  ╚══════╝╚═╝     ╚═╝ ╚═════╝ ╚═╝     ╚═╝ ╚═════╝ ╚═╝     ╚═╝ ╚═════╝ "
    echo -e "${NC}"

    echo -e "${LIGHTCYAN}============================= VPS 脚本菜单 =============================${NC}"
    echo -e "${LIGHTBLUE}使用快捷指令 m 可快速打开脚本😊${NC}"
    echo -e "${LIGHTBLUE}作者：emo的小默默${NC}"
    echo -e "${LIGHTCYAN}=====================================================================${NC}"
    
    echo -e "${YELLOW}请选择要执行的任务：${NC}"

# 使用 printf 格式化菜单选项，确保对齐和高科技感
clear
echo -e "${BLUE}  ♥ System Management Console ${NC}"
echo -e "${CYAN}  ---------------------------- ${NC}"
echo ""
printf "  ${PURPLE}01${NC} ${PINK}♥${NC} %-30s\n" "搭建hy2节点"
printf "  ${PURPLE}02${NC} ${PINK}♥${NC} %-30s\n" "UFW 防火墙"
printf "  ${PURPLE}03${NC} ${PINK}♥${NC} %-30s\n" "配置密钥登录"
printf "  ${PURPLE}04${NC} ${PINK}♥${NC} %-30s\n" "修改登录端口"
printf "  ${PURPLE}05${NC} ${PINK}♥${NC} %-30s\n" "一键搭建节点"
printf "  ${PURPLE}06${NC} ${PINK}♥${NC} %-30s\n" "一键配置WARP"
printf "  ${PURPLE}07${NC} ${PINK}♥${NC} %-30s\n" "一键BBR加速"
printf "  ${PURPLE}08${NC} ${PINK}♥${NC} %-30s\n" "Docker管理"
printf "  ${PURPLE}09${NC} ${PINK}♥${NC} %-30s\n" "系统信息查询"
printf "  ${PURPLE}10${NC} ${PINK}♥${NC} %-30s\n" "设IPv4/6优先级"
printf "  ${PURPLE}11${NC} ${PINK}♥${NC} %-30s\n" "更新主脚本"
printf "  ${PURPLE}12${NC} ${PINK}♥${NC} %-30s\n" "保持ssh连接"
printf "  ${PURPLE}13${NC} ${PINK}♥${NC} %-30s\n" "一键DD系统"
printf "  ${PURPLE}14${NC} ${PINK}♥${NC} %-30s\n" "监控TG关键词"
printf "  ${PURPLE}15${NC} ${PINK}♥${NC} %-30s\n" "主机名颜色"
printf "  ${PURPLE}16${NC} ${PINK}♥${NC} %-30s\n" "测试流媒体"
printf "  ${PURPLE}00${NC} ${PINK}♥${NC} %-30s\n" "退出"

    read -p "请输入选项 (0-16): " choice
    case "$choice" in
        1)
            execute_script "https://gist.githubusercontent.com/momo97620/68630501ec62d5f6ece848d5e3ffad4e/raw/203246731cde7f6ca90d8b2e934cf0ffa5127cb4/hy2" "搭建 Hysteria 节点完成。"
            ;;
        2)
            execute_script "https://gist.githubusercontent.com/momo97620/2ecbf06ce959fda14b01c0ce9f34f3d8/raw/ebbbdf08a05c890d72902863c53bf80af9531601/ufw_install.sh" "安装并配置 UFW 防火墙完成。"
            ;;
        3)
            configure_ssh_pam
            ;;
        4)
            execute_script "https://gist.githubusercontent.com/momo97620/685e1ead90ed0ad379c6a75e27409704/raw/aaeabe347f3612e9c308b898e64bcfd12276a067/duank" "修改登录端口号完成。"
            ;;
        5)
            execute_script "https://github.com/233boy/sing-box/raw/main/install.sh" "一键搭建节点完成。"
            ;;
        6)
            execute_script "https://gitlab.com/fscarmen/warp/-/raw/main/menu.sh" "一键WARP完成。"
            ;;
        7)
            execute_script "https://github.com/ylx2016/Linux-NetSpeed/raw/master/tcp.sh" "BBR加速完成。"
            ;;
        8)
            execute_script "https://raw.githubusercontent.com/momo97620/momoya/refs/heads/main/docker" "Docker管理完成。"
            ;;
        9)
            execute_script "https://raw.githubusercontent.com/momo97620/momoya/main/xitong" "系统信息查询完成。"
            ;;
        10)
            set_ip_priority
            ;;
        11)
            update_script
            ;;
        12) 
            set_ssh_keepalive
            ;;
        13) 
            download_reinstall_script
            run_reinstall_script
            ;;  
        14) 
             execute_script "https://raw.githubusercontent.com/ecouus/Feed-Push/refs/heads/main/bot_deploy.sh" "TG关键词订阅部署完成。"
            ;;  
        15)
            RAINBOW_PROMPT::main
            ;;
        16)
            bash <(curl -sL IP.Check.Place)
            ;;
        0)
            echo -e "${GREEN}退出程序...${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}无效的选择，请重新输入！${NC}"
            read -p "按回车键返回主菜单..."
            ;;
    esac
}

# 主执行逻辑
main() {
    if [[ "$1" == "install" ]]; then
        install_script
        exit 0
    fi

    echo -e "${YELLOW}脚本路径: $SCRIPT_PATH${NC}"
    echo -e "${YELLOW}安装路径: $INSTALL_DIR${NC}"

    if [ ! -d "$INSTALL_DIR" ]; then
        install_script
    else
        echo -e "${GREEN}脚本已安装到：$INSTALL_DIR${NC}"
    fi

    # 调用主菜单
    while true; do
        show_main_menu
    done
}

# 执行主逻辑
main "$@"