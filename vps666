#!/bin/bash

# 获取脚本路径
SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]}")
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")

# 定义固定安装路径（例如：/usr/local/my_script）
INSTALL_DIR="/usr/local/my_script"

# 定义颜色
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
LIGHTBLUE='\033[1;34m'
LIGHTCYAN='\033[1;36m'
NC='\033[0m' # No Color

# 检查脚本是否被直接运行
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    echo -e "${RED}This script must be run directly, not sourced.${NC}"
    exit 1
fi

# 检查是否以 root 用户运行
if [ "$(id -u)" != "0" ]; then
    echo -e "${RED}请以 root 用户运行脚本。${NC}"
    exit 1
fi

# 修复主机名解析问题
fix_hostname_resolution() {
    echo -e "${YELLOW}正在修复主机名解析问题...${NC}"
    HOSTNAME=$(hostname)
    
    # 检查并修复 /etc/hosts 文件
    if ! grep -q "127.0.0.1 $HOSTNAME" /etc/hosts; then
        echo -e "${YELLOW}修复 /etc/hosts 中的主机名解析...${NC}"
        echo "127.0.0.1 $HOSTNAME" | sudo tee -a /etc/hosts > /dev/null
    fi

    # 修复主机名
    if [ -n "$HOSTNAME" ]; then
        echo -e "${YELLOW}正在设置主机名：$HOSTNAME...${NC}"
        sudo hostnamectl set-hostname $HOSTNAME
    fi
}

# 设置快捷启动指令
setup_quick_start() {
    local shortcut_script="$SCRIPT_DIR/quick_start.sh"
    
    # 创建快捷启动脚本
    if [ ! -f "$shortcut_script" ]; then
        echo -e "${GREEN}正在创建快捷启动脚本...${NC}"
        echo -e "#!/bin/bash" > "$shortcut_script"
        echo -e "bash $SCRIPT_PATH" >> "$shortcut_script"
        
        # 设置执行权限
        chmod +x "$shortcut_script"
        echo -e "${GREEN}快捷启动脚本创建成功：$shortcut_script${NC}"
    fi
}

# 显示主菜单
show_main_menu() {
    while true; do
        clear  # 清屏，使菜单界面更加清晰
        
        # 在顶部显示超大绿色 "M"
        echo -e "${GREEN}███████╗██╗  ██╗██╗██╗      ${NC}"
        echo -e "${GREEN}╚══██╔══╝██║  ██║██║██║      ${NC}"
        echo -e "${GREEN}   ██║   ███████║██║██║██████╗${NC}"
        echo -e "${GREEN}   ██║   ██╔══██║██║██║╚════╝${NC}"
        echo -e "${GREEN}   ██║   ██║  ██║██║██║██████╗${NC}"
        echo -e "${GREEN}   ╚═╝   ╚═╝  ╚═╝╚═╝╚═════╝${NC}"
        
        # 插入快捷键提示
        echo -e "${YELLOW}使用快捷键 ${LIGHTCYAN}n${NC} 可以快速启动脚本 ${LIGHTBLUE}😊${NC}"
        
        # 添加作者信息
        echo -e "${LIGHTCYAN}作者：emo的小默默${NC}"
        
        echo -e "${BLUE}========================== VPS 脚本菜单 ========================== ${NC}"
        echo -e "${GREEN}请选择要执行的任务：${NC}"
        
        # 调整后的两排菜单选项，确保上下对齐
        echo -e "1. 搭建 Hysteria 节点           6. 一键WARP"
        echo -e "2. 安装并配置 UFW 防火墙       7. BBR加速"
        echo -e "3. 配置密钥登录               8. Docker管理"
        echo -e "4. 修改登录端口号             9. 系统信息查询"
        echo -e "0. 退出"
        
        echo -e "${BLUE}============================================================${NC}"
        
        read -p "请输入选项 (0-9): " choice
        case $choice in
            n)
                echo -e "${GREEN}执行快捷启动，启动主脚本...${NC}"
                bash "$SCRIPT_PATH"
                ;;
            1)
                echo -e "${YELLOW}正在执行：搭建 Hysteria 节点...${NC}"
                bash <(curl -sSL https://gist.githubusercontent.com/momo97620/68630501ec62d5f6ece848d5e3ffad4e/raw/203246731cde7f6ca90d8b2e934cf0ffa5127cb4/hy2)
                ;;
            2)
                echo -e "${YELLOW}正在执行：安装并配置 UFW 防火墙...${NC}"
                bash <(curl -sSL https://gist.githubusercontent.com/momo97620/2ecbf06ce959fda14b01c0ce9f34f3d8/raw/e7d1e2ad49decc464f0a814c436ca4b6151986e7/ufw_install.sh)
                ;;
            3)
                echo -e "${YELLOW}正在执行：配置密钥登录...${NC}"
                bash <(curl -sSL https://gist.githubusercontent.com/momo97620/035985261aa7f946270590a15ca4c9f6/raw/a843704765ad3e600461693379fd6b2fa0cecd66/miyao)
                read -p "密钥配置完成，请按回车键返回主菜单..."
                ;;
            0)
                echo -e "${GREEN}退出程序...${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}无效的选择，请重新输入！${NC}"
                ;;
        esac
    done
}

# 自动配置主机名解析
fix_hostname_resolution

# 设置快捷启动脚本
setup_quick_start

# 运行主菜单
show_main_menu