#!/bin/bash

# 定义颜色
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # 恢复默认颜色

# 检查依赖
check_dependencies() {
    local dependencies=("curl" "jq" "bc" "wget")
    local missing_deps=()

    for cmd in "${dependencies[@]}"; do
        if ! command -v "$cmd" &>/dev/null; then
            missing_deps+=("$cmd")
        fi
    done

    if [ ${#missing_deps[@]} -gt 0 ]; then
        echo -e "${YELLOW}正在安装缺失的依赖:${NC} ${missing_deps[*]}"
        sudo apt update
        sudo apt install -y "${missing_deps[@]}"
    fi
}

# 获取网络流量统计
get_network_traffic() {
    # 使用 /proc/net/dev 获取更准确的流量信息
    local rx_bytes=$(awk '/eth0:|enp0s3:/{rx+=$2} END{printf "%.2f", rx/1024/1024/1024}' /proc/net/dev)
    local tx_bytes=$(awk '/eth0:|enp0s3:/{tx+=$10} END{printf "%.2f", tx/1024/1024/1024}' /proc/net/dev)
    
    # 如果没有获取到，尝试使用 ifconfig
    if [ -z "$rx_bytes" ] || [ "$rx_bytes" == "0.00" ]; then
        rx_bytes=$(ifconfig | grep -oP 'RX bytes:\K\d+' | awk '{sum+=$1} END {printf "%.2f", sum/1024/1024/1024}')
    fi
    
    if [ -z "$tx_bytes" ] || [ "$tx_bytes" == "0.00" ]; then
        tx_bytes=$(ifconfig | grep -oP 'TX bytes:\K\d+' | awk '{sum+=$1} END {printf "%.2f", sum/1024/1024/1024}')
    fi
    
    echo "${rx_bytes:-0.00}|${tx_bytes:-0.00}"
}

# 获取地理位置（改进版）
get_location() {
    # 尝试多种方法获取地理位置
    local locations=(
        "https://ipapi.co/json"
        "https://ip-api.com/json"
        "https://ipinfo.io/json"
    )

    for url in "${locations[@]}"; do
        local location_data=$(curl -s -m 5 "$url")
        
        # 尝试解析不同API的返回格式
        local region=$(echo "$location_data" | jq -r '.region // .regionName // ""')
        local country=$(echo "$location_data" | jq -r '.country_name // .country // ""')
        
        if [ -n "$region" ] && [ -n "$country" ]; then
            echo "$region, $country"
            return
        fi
    done

    echo "未知位置"
}

# 获取网络信息
get_network_info() {
    local ipv4=$(curl -s4 https://ipinfo.io/ip)
    local ipv6=$(ip -6 addr show | grep inet6 | grep -v '::1' | grep -v 'fe80' | awk '{print $2}' | cut -d'/' -f1 | head -n1)
    
    echo "${ipv4:-未分配}|${ipv6:-未分配}"
}

# 获取系统负载
get_system_load() {
    local load=$(uptime | awk -F'load average:' '{print $2}' | sed 's/^[ \t]*//')
    echo "$load"
}

# 获取CPU使用率
get_cpu_usage() {
    local usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4"%"}')
    echo "$usage"
}

# 主程序
main() {
    # 清屏并检查依赖
    clear
    check_dependencies

    # 收集系统信息
    local HOSTNAME=$(hostname)
    local OS_VERSION=$(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)
    local KERNEL_VERSION=$(uname -r)
    local ARCH=$(uname -m)
    local CPU_INFO=$(lscpu | grep "Model name" | cut -d: -f2 | xargs)
    local CPU_CORES=$(nproc)
    local CPU_FREQ=$(lscpu | grep "MHz" | head -n1 | awk '{printf "%.1f GHz", $3/1000}')
    
    # 网络和位置信息
    IFS='|' read -r IPV4 IPV6 <<< "$(get_network_info)"
    local LOCATION=$(get_location)
    local ISP=$(curl -s https://ipinfo.io/org)
    local DNS=$(grep -m3 nameserver /etc/resolv.conf | awk '{print $2}' | tr '\n' ' ')

    # 系统性能信息
    local LOAD_AVG=$(get_system_load)
    local CPU_USAGE=$(get_cpu_usage)
    local MEM_INFO=$(free -h | awk '/Mem:/{printf "%s/%s (%.1f%%)", $3, $2, $3/$2*100}')
    local SWAP_INFO=$(free -h | awk '/Swap:/{printf "%s/%s (%.1f%%)", $3, $2, $3/$2*100}')
    local DISK_USAGE=$(df -h / | awk '/\//{ printf "%s/%s (%s)", $3, $2, $5 }')
    
    # 网络流量信息
    IFS='|' read -r RX_BYTES TX_BYTES <<< "$(get_network_traffic)"
    
    # 时间和运行时间
    local TIMEZONE=$(timedatectl | grep "Time zone" | awk '{print $3}')
    local CURRENT_TIME=$(date "+%Y-%m-%d %H:%M:%S")

    # 网络算法和防火墙
    local NETWORK_ALGO=$(sysctl -n net.ipv4.tcp_congestion_control)
    local FIREWALL_STATUS=$(systemctl is-active ufw || echo "未安装")

    # 输出系统信息
    echo -e "${BLUE}系统信息查询${NC}\n"
    echo -e "${GREEN}基本信息:${NC}"
    echo -e "主机名:       ${YELLOW}$HOSTNAME${NC}"
    echo -e "系统版本:     ${YELLOW}$OS_VERSION${NC}"
    echo -e "Linux版本:    ${YELLOW}$KERNEL_VERSION${NC}"
    
    echo -e "\n${GREEN}CPU信息:${NC}"
    echo -e "CPU架构:      ${YELLOW}$ARCH${NC}"
    echo -e "CPU型号:      ${YELLOW}$CPU_INFO${NC}"
    echo -e "CPU核心数:    ${YELLOW}$CPU_CORES${NC}"
    echo -e "CPU频率:      ${YELLOW}$CPU_FREQ${NC}"
    echo -e "CPU占用:      ${YELLOW}$CPU_USAGE${NC}"
    
    echo -e "\n${GREEN}系统性能:${NC}"
    echo -e "系统负载:     ${YELLOW}$LOAD_AVG${NC}"
    echo -e "物理内存:     ${YELLOW}$MEM_INFO${NC}"
    echo -e "虚拟内存:     ${YELLOW}$SWAP_INFO
    echo -e "\n${GREEN}系统时间:${NC}"
    echo -e "时区:         ${YELLOW}$TIMEZONE${NC}"
    echo -e "当前时间:     ${YELLOW}$CURRENT_TIME${NC}"
    
    echo -e "\n${RED}-------------${NC}"
    echo -e "${GREEN}操作完成${NC}"
    echo -e "${BLUE}按任意键继续...${NC}"
    
    # 等待用户按键
    read -n 1 -s
}

# 调用主程序
main
