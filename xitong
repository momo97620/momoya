#!/bin/bash

# 定义颜色
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
LIGHTCYAN='\033[1;36m'  # 亮青色
LIGHTGREEN='\033[1;32m' # 亮绿色
NC='\033[0m' # No Color

# 检查并安装 jq 和 curl
check_and_install() {
    # 检查 jq 是否安装
    if ! command -v jq &> /dev/null; then
        echo -e "${YELLOW}正在安装 jq...${NC}"
        sudo apt-get update -y -qq &> /dev/null && sudo apt-get install jq -y -qq &> /dev/null
    fi

    # 检查 curl 是否安装
    if ! command -v curl &> /dev/null; then
        echo -e "${YELLOW}正在安装 curl...${NC}"
        sudo apt-get update -y -qq &> /dev/null && sudo apt-get install curl -y -qq &> /dev/null
    fi
}

# 显示系统信息
show_system_info() {
    # 获取主机名和系统信息
    hostname=$(hostname)
    os_info=$(lsb_release -d | awk -F: '{print $2}' | xargs)
    kernel_version=$(uname -r)
    
    # 获取CPU信息
    cpu_info=$(lscpu | grep "Model name" | awk -F: '{print $2}' | xargs)
    cpu_arch=$(uname -m)
    cpu_cores=$(nproc)
    cpu_speed=$(lscpu | grep "CPU MHz" | awk -F: '{print $2}' | xargs)
    
    # 获取内存信息
    mem_total=$(free -m | grep Mem | awk '{print $2}')
    mem_used=$(free -m | grep Mem | awk '{print $3}')
    
    # 获取硬盘使用情况
    disk_total=$(df -h / | awk 'NR==2 {print $2}')
    disk_used=$(df -h / | awk 'NR==2 {print $3}')
    
    # 获取网络信息
    network_in=$(cat /proc/net/dev | grep eth0 | awk '{print $2}')
    network_out=$(cat /proc/net/dev | grep eth0 | awk '{print $10}')
    
    # 获取地理位置，改用备用 API
    location=$(curl -s https://ipinfo.io | jq -r '.city, .region, .country')

    # 如果没有获取到地理位置，显示 "未知"
    if [ -z "$location" ]; then
        location="未知"
    fi

    # 获取IPv6地址，排除掉回环地址 (::1)
    ipv6_address=$(ip -6 addr show | grep inet6 | grep -v "fe80" | grep -v "::1" | awk '{print $2}' | cut -d/ -f1 | head -n 1)

    # 获取IPv4地址
    ipv4_address=$(ip -4 addr show | grep inet | grep -v "127.0.0.1" | awk '{print $2}' | cut -d/ -f1 | head -n 1)
    
    # 获取系统运行时长（并避免浮点数运算错误）
    uptime_seconds=$(awk '{print $1}' /proc/uptime)
    uptime_seconds_int=$(printf "%.0f" $uptime_seconds)  # 将浮点数转换为整数
    uptime_days=$((uptime_seconds_int / 86400))
    uptime_hours=$(( (uptime_seconds_int % 86400) / 3600 ))

    # 获取防火墙状态并转换为中文
    firewall_status="未启用"
    if command -v ufw &> /dev/null; then
        firewall_status=$(ufw status | grep -o 'active' || echo 'inactive')
        if [[ $firewall_status == "active" ]]; then
            firewall_status="已启用"
        fi
    fi

    # 输出系统信息，调整排版
    printf "%-20s: %-50s\n" "主机名" "$hostname"
    printf "%-20s: %-50s\n" "系统版本" "$os_info"
    printf "%-20s: %-50s\n" "内核版本" "$kernel_version"
    printf "%-20s: %-50s\n" "CPU架构" "$cpu_arch"
    printf "%-20s: %-50s\n" "CPU型号" "$cpu_info"
    printf "%-20s: %-50s\n" "CPU核心数" "$cpu_cores"
    printf "%-20s: %-50s\n" "CPU频率" "$cpu_speed MHz"
    printf "%-20s: %-50s\n" "内存" "$mem_used/$mem_total MB"
    printf "%-20s: %-50s\n" "硬盘使用" "$disk_used/$disk_total"
    printf "%-20s: %-50s\n" "网络接收" "$network_in KB"
    printf "%-20s: %-50s\n" "网络发送" "$network_out KB"
    
    # 如果地理位置不为空且不重复显示
    printf "%-20s: %-50s\n" "地理位置" "$location"
    
    printf "%-20s: %-50s\n" "IPv6地址" "$ipv6_address"
    printf "%-20s: %-50s\n" "IPv4地址" "$ipv4_address"
    printf "%-20s: %-50s\n" "防火墙状态" "$firewall_status"
    printf "%-20s: %-50s\n" "系统运行时长" "$uptime_days 天 $uptime_hours 小时"
}

# 执行安装检查
check_and_install

# 执行显示系统信息函数
show_system_info